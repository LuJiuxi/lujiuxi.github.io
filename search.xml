<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeNet-5</title>
      <link href="/2022/10/04/LeNet-5/"/>
      <url>/2022/10/04/LeNet-5/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>LeNet-5由LeCun等人提出于1998年提出，是一种用于手写体字符识别的非常高效的卷积神经网络。出自论文《Gradient-Based Learning Applied to Document Recognition》</li><li><a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf">http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf</a></li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><p>LeNet-5网络示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/819b3373e991f235.png" alt=""></p></li><li><p>C1层：该层是一个卷积层。使用6个大小为5x5的卷积核，步长为1，对输入层进行卷积运算，特征图尺寸为32-5+1=28，因此产生6个大小为28x28的特征图。这么做够防止原图像输入的信息掉到卷积核边界之外。</p></li><li><p>S2层：该层是一个池化层（pooling，也称为下采样层）。这里采用max_pool（最大池化），池化的size定为2x2，经池化后得到6个14x14的特征图，作为下一层神经元的输入。</p></li><li><p>C3层：该层仍为一个卷积层，我们选用大小为5x5的16种不同的卷积核。这里需要注意：C3中的每个特征图，都是S2中的所有6个或其中几个特征图进行加权组合得到的。输出为16个10x10的特征图。</p></li><li><p>S4层：该层仍为一个池化层，size为2x2，仍采用max_pool。最后输出16个5x5的特征图，神经元个数也减少至16x5x5=400。</p></li><li><p>C5层：该层我们继续用5x5的卷积核对S4层的输出进行卷积，卷积核数量增加至120。这样C5层的输出图片大小为5-5+1=1。最终输出120个1x1的特征图。这里实际上是与S4全连接了，但仍将其标为卷积层，原因是如果LeNet-5的输入图片尺寸变大，其他保持不变，那该层特征图的维数也会大于1x1。</p></li><li><p>F6层：该层与C5层全连接，输出84张特征图。</p></li><li><p>输出层：该层与F6层全连接，输出长度为10的张量，代表所抽取的特征属于哪个类别。（例如[0,0,0,1,0,0,0,0,0,0]的张量，1在index=3的位置，故该张量代表的图片属于第三类）</p></li></ul><h2 id="明细"><a href="#明细" class="headerlink" title="明细"></a>明细</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li>padding：在图像四周填充零的层数</li><li>stride：卷积核移动的步长</li></ul><h3 id="C1层"><a href="#C1层" class="headerlink" title="C1层"></a>C1层</h3><ul><li><p>C1 层是卷积层，使用 6 个 5×5 大小的卷积核，padding=0，stride=1进行卷积，得到 6 个 28×28 大小的特征图：32-5+1=28</p></li><li><p>C1层原理示意</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/392c16739f6bc405.png" alt=""></p></li><li><p><strong>参数个数</strong>：(5x5+1)x6=156，其中5x5为卷积核的25个参数w，1为偏置项b。</p><p><strong>连接数</strong>：156x28x28=122304，其中156为单次卷积过程连线数，28x28为输出特征层，每一个像素都由前面卷积得到，即总共经历28x28次卷积。</p></li></ul><h3 id="S2层"><a href="#S2层" class="headerlink" title="S2层"></a>S2层</h3><ul><li><p>S2 层是降采样层，使用 6 个 2×2 大小的卷积核进行池化，padding=0，stride=2，得到 6 个 14×14 大小的特征图：28/2=14。</p></li><li><p>S2 层其实相当于降采样层+激活层。先是降采样，然后激活函数 sigmoid 非线性输出。先对 C1 层 2x2 的视野求和，然后进入激活函数，即：</p><script type="math/tex; mode=display">sigmoid(w·\sum_{i = 1}^4x_i + b)</script></li><li><p>S2层示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/97039d914f703b7e.png" alt=""></p></li><li><p><strong>参数个数</strong>：(1+1)x6=12，其中第一个 1 为池化对应的 2x2 感受野中最大的那个数的权重 w，第二个 1 为偏置 b。</p><p><strong>连接数</strong>：(2x2+1)x6x14x14= 5880，虽然只选取 2x2 感受野之和，但也存在 2x2 的连接数，1 为偏置项的连接，14x14 为输出特征层，每一个像素都由前面卷积得到，即总共经历 14x14 次卷积。</p></li></ul><h3 id="C3层"><a href="#C3层" class="headerlink" title="C3层"></a>C3层</h3><ul><li><p>C3 层是卷积层，使用 16 个 5×5xn 大小的卷积核，padding=0，stride=1 进行卷积，得到 16 个 10×10 大小的特征图：14-5+1=10。</p></li><li><p>16 个卷积核并不是都与 S2 的 6 个通道层进行卷积操作，如下图所示，C3 的前六个特征图（0,1,2,3,4,5）由 S2 的相邻三个特征图作为输入，对应的卷积核尺寸为：5x5x3；接下来的 6 个特征图（6,7,8,9,10,11）由 S2 的相邻四个特征图作为输入对应的卷积核尺寸为：5x5x4；接下来的 3 个特征图（12,13,14）号特征图由 S2 间断的四个特征图作为输入对应的卷积核尺寸为：5x5x4；最后的 15 号特征图由 S2 全部(6 个)特征图作为输入，对应的卷积核尺寸为：5x5x6。</p></li><li><p>C3输入示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/66e1b30ae1a7e968.png" alt=""></p></li><li><p>值得注意的是，卷积核是 5×5 且具有 3 个通道，每个通道各不相同，这也是下面计算时 5*5 后面还要乘以3,4,6的原因。这是多通道卷积的计算方法。</p></li><li><p>C3层示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/7ae9f260059019a9.png" alt=""></p></li><li><p><strong>参数个数</strong>：(5x5x3+1)x6+(5x5x4+1)x6+(5x5x4+1)x3+(5x5x6+1)x1=1516。</p><p><strong>连接数</strong>：1516x10x10 = 151600。10x10为输出特征层，每一个像素都由前面卷积得到，即总共经历10x10次卷积。</p></li></ul><h3 id="S4层"><a href="#S4层" class="headerlink" title="S4层"></a>S4层</h3><ul><li><p>S4 层与 S2 一样也是降采样层，使用 16 个 2×2 大小的卷积核进行池化，padding=0，stride=2，得到 16 个 5×5 大小的特征图：10/2=5。</p></li><li><p><strong>参数个数</strong>：(1+1)*16=32。</p><p><strong>连接数</strong>：(2<em>2+1)</em>16<em>5</em>5= 2000。</p></li></ul><h3 id="C5层"><a href="#C5层" class="headerlink" title="C5层"></a>C5层</h3><ul><li><p>C5 层是卷积层，使用 120 个 5×5x16 大小的卷积核，padding=0，stride=1进行卷积，得到 120 个 1×1 大小的特征图：5-5+1=1。即相当于 120 个神经元的全连接层。</p></li><li><p>值得注意的是，与C3层不同，这里120个卷积核都与S4的16个通道层进行卷积操作。</p></li><li><p><strong>参数个数</strong>：(5<em>5</em>16+1)*120=48120。</p><p><strong>连接数</strong>：48120<em>1</em>1=48120。</p></li></ul><h3 id="F6层"><a href="#F6层" class="headerlink" title="F6层"></a>F6层</h3><ul><li><p>F6 是全连接层，共有 84 个神经元，与 C5 层进行全连接，即每个神经元都与 C5 层的 120 个特征图相连。计算输入向量和权重向量之间的点积，再加上一个偏置，结果通过 sigmoid 函数输出。</p></li><li><p>F6 层有 84 个节点，对应于一个 7x12 的比特图，-1 表示白色，1 表示黑色，这样每个符号的比特图的黑白色就对应于一个编码。该层的训练参数和连接数是(120 + 1)x84=10164。</p></li><li><p><strong>参数个数</strong>：(120+1)x84=10164。</p><p><strong>连接数</strong>：(120+1)x84=10164。</p></li></ul><h3 id="输出层"><a href="#输出层" class="headerlink" title="输出层"></a>输出层</h3><ul><li><p>最后的 Output 层也是全连接层，是 Gaussian Connections，采用了 RBF 函数（即径向欧式距离函数），计算输入向量和参数向量之间的欧式距离（目前已经被Softmax 取代）。</p></li><li><p>Output 层共有 10 个节点，分别代表数字 0 到 9。假设x是上一层的输入，y 是 RBF的输出，则 RBF 输出的计算方式是：</p></li></ul><script type="math/tex; mode=display">y_i = \sum_{i=0}^{83}(x_j - w_{ij})^2</script><ul><li>上式中 i 取值从 0 到 9，j 取值从 0 到 7x12-1，w 为参数。RBF 输出的值越接近于 0，则越接近于 i，即越接近于 i 的 ASCII 编码图，表示当前网络输入的识别结果是字符 i。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>论文看不懂</li></ul>]]></content>
      
      
      <categories>
          
          <category> 神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神将网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本操作</title>
      <link href="/2022/09/30/Hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/09/30/Hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL常用语法</title>
      <link href="/2022/09/28/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/09/28/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="零、示例用表"><a href="#零、示例用表" class="headerlink" title="零、示例用表"></a>零、示例用表</h2><ul><li><p>学生表S</p><figure><table><thead><tr><th>S#</th><th>SN</th><th>SA</th><th>SD</th></tr></thead><tbody><tr><td>s1</td><td>李勇</td><td>20</td><td>CS</td></tr><tr><td>s2</td><td>刘晨</td><td>19</td><td>IS</td></tr><tr><td>s3</td><td>王敏</td><td>18</td><td>MA</td></tr><tr><td>s4</td><td>张立</td><td>19</td><td>IS</td></tr></tbody></table></figure></li><li><p>课程表C</p><figure><table><thead><tr><th>C#</th><th>CN</th><th>PC#</th></tr></thead><tbody><tr><td>C1</td><td>数据库</td><td>CS</td></tr><tr><td>C2</td><td>数学</td><td>&nbsp;</td></tr><tr><td>C3</td><td>信息系统</td><td>C1</td></tr><tr><td>C4</td><td>操作系统</td><td>C6</td></tr><tr><td>C5</td><td>数据结构</td><td>C7</td></tr><tr><td>C6</td><td>数据处理</td><td>&nbsp;</td></tr><tr><td>C7</td><td>Pascal语言</td><td>C6</td></tr></tbody></table></figure></li><li><p>学生选课表SC</p><figure><table><thead><tr><th>S#</th><th>C#</th><th>G</th></tr></thead><tbody><tr><td>s1</td><td>C1</td><td>92</td></tr><tr><td>s1</td><td>C2</td><td>85</td></tr><tr><td>s1</td><td>C3</td><td>88</td></tr><tr><td>s2</td><td>C2</td><td>90</td></tr><tr><td>s2</td><td>C3</td><td>80</td></tr></tbody></table></figure></li></ul><h2 id="一、SQL数据查询功能"><a href="#一、SQL数据查询功能" class="headerlink" title="一、SQL数据查询功能"></a>一、SQL数据查询功能</h2><ul><li>查询的基本结构：<code>SELECT-FROM-WHERE</code><ul><li><code>SELECT</code>目标列</li><li><code>FROM</code>基本表（或视图）</li><li><code>WHERE</code>检索条件</li></ul></li></ul><h3 id="（一）投影检索"><a href="#（一）投影检索" class="headerlink" title="（一）投影检索"></a>（一）投影检索</h3><ul><li><p>含义：<code>SELECT-FROM-WHERE</code>查询语句中没有<code>WHERE</code>子句</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#例: 查询学生的姓名和学号</span><br><span class="line"><span class="keyword">SELECT</span> SN, SA</span><br><span class="line"><span class="keyword">FROM</span> S;</span><br></pre></td></tr></table></figure></li><li><p>采用<code>DISTINCT</code>消去结果中的重复行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#例: 检索学生所选修课程的课程号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> C#</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）选取检索"><a href="#（二）选取检索" class="headerlink" title="（二）选取检索"></a>（二）选取检索</h3><ul><li><p>由<code>WHERE</code>子句指出查询条件</p></li><li><p>检索条件可以包含以下的运算符</p><ul><li>比较运算符：<code>=, &lt;&gt;(!=), &gt;, &gt;=, &lt;=​</code></li><li>布尔运算符：<code>AND, OR, NOT</code></li><li><code>()</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>: 检索选修C2课程的所有学生的学号和成绩</span><br><span class="line"><span class="keyword">SELECT</span> S#, G</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> C# <span class="operator">=</span> <span class="string">&#x27;C2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>: 检索选修C1或C2且成绩高于<span class="number">70</span>分的学生学号、课程号和成绩</span><br><span class="line"><span class="keyword">SELECT</span> S#, C#, G</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> (C# <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span> <span class="keyword">OR</span> C# <span class="operator">=</span> <span class="string">&#x27;C2&#x27;</span>) <span class="keyword">AND</span> G <span class="operator">&gt;=</span> <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">3</span>: 检索成绩在<span class="number">70</span>至<span class="number">85</span>分之间的学生学号、课程号和成绩。</span><br><span class="line"><span class="keyword">SELECT</span> S#, C#, G</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> G <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">85</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）排序检索"><a href="#（三）排序检索" class="headerlink" title="（三）排序检索"></a>（三）排序检索</h3><ul><li><p>在SELECT-FROM-WHERE查询块后接ORDER BY子 句，将结果按指定列排序。 </p></li><li><p>格式：<code>ORDER BY 列名 ASC 或 DESC</code></p><ul><li><code>ASC</code>为升序；<code>DESC</code>为降序，缺省为升序 </li><li>可以是单列排序或多列排序 </li><li>该子句在<code>SELECT</code>语句中作为最后一个子句出现</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#例: 检索全体学生信息，并按系号升序，同一个系</span><br><span class="line">按年龄降序排列。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> SD, SA <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（四）连表检索"><a href="#（四）连表检索" class="headerlink" title="（四）连表检索"></a>（四）连表检索</h3><ul><li>将多个相互关联的表按照一定条件连接起来，实现多表数据检索</li><li>SELECT-FROM-WHERE语句块结构：<ul><li>SELECT—— 指明选取的列名（来自多个表） </li><li>FROM—— 指明要进行连接的表名 </li><li>WHERE——指明连接条件（连接谓词）与选取条件。</li></ul></li></ul><h4 id="1、一般格式"><a href="#1、一般格式" class="headerlink" title="1、一般格式"></a>1、一般格式</h4><ul><li><p>连接条件一般格式为：<code>[&lt;表名&gt; .] &lt;列名&gt; &lt;比较运算符&gt; [&lt;表名&gt; .] &lt;列名&gt;</code></p><p>其中， <code>&lt;列名&gt;</code>称为连接字段； <code>&lt;比较运算符&gt;</code>主要有：<code>=，&gt;，&lt;， &gt;=，&lt;=，!=</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>: 检索学生张华所学课程的成绩。</span><br><span class="line"><span class="keyword">SELECT</span> SN, C#, G</span><br><span class="line"><span class="keyword">FROM</span> S, SC</span><br><span class="line"><span class="keyword">WHERE</span> S.S#<span class="operator">=</span>SC.S# <span class="keyword">AND</span> SN<span class="operator">=</span><span class="string">&#x27;张华&#x27;</span>;</span><br><span class="line"># 注：如果连接的表中有属性名相同，要用表名作前缀加以区分。</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、自身连接"><a href="#2、自身连接" class="headerlink" title="2、自身连接"></a>2、自身连接</h4><ul><li><p>表自身的连接：通过定义别名，将一个表看成两个表，进行连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">2</span>: 检索所有比李勇年龄大的学生姓名、年龄。</span><br><span class="line"><span class="keyword">SELECT</span> X.SN, X.SA</span><br><span class="line"><span class="keyword">FROM</span> S X, S Y</span><br><span class="line"><span class="keyword">WHERE</span> X.SA <span class="operator">&gt;</span> Y.SA <span class="keyword">AND</span> Y.SN <span class="operator">=</span> ‘李勇’;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、外连接"><a href="#3、外连接" class="headerlink" title="3、外连接"></a>3、外连接</h4><ul><li><p>外连接：在连接谓词某一边加（*或+），则逻辑上为*所在边的表增加了一个空行。它可以与另一个表中所有不满足连接条件的元组进行连接，使这些元组能够输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">3</span>: 检索所有学生的全部信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S, SC</span><br><span class="line"><span class="keyword">WHERE</span> S.S# <span class="operator">=</span> SC.S#(<span class="operator">*</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="（五）子查询嵌套检索"><a href="#（五）子查询嵌套检索" class="headerlink" title="（五）子查询嵌套检索"></a>（五）子查询嵌套检索</h3><ul><li>WHERE子句中可以包含另一个查询块，该查询块称为<strong>子查询或嵌套查询</strong>，包含子查询的语句称为<strong>外部查询</strong> </li><li>外部查询利用子查询来获取检索条件的条件值，检索条件根据子查询的结果来确定外部查询的结果数据 </li><li>子查询按照与外部查询的联系不同，分为普通子查询和相关子查询 <ul><li>普通子查询：与外部查询无关，可单独执行得一组值</li><li>相关子查询：把外查询的列值作为检索条件的条件值</li></ul></li></ul><h4 id="1、涉及同一个表的子查询"><a href="#1、涉及同一个表的子查询" class="headerlink" title="1、涉及同一个表的子查询"></a>1、涉及同一个表的子查询</h4><ul><li><p>如果子查询返回单值，可以直接用比较运算符<code>=,&lt;&gt;,&gt;,&gt;=,&lt;,&lt;=</code>等连接子查询。</p></li><li><p>如果子查询返回一组值，则必须在比较运算符和子 查询之间插入<code>ANY、ALL</code>等操作符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>: 检索与李勇同岁的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S.SA <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> SA <span class="keyword">FROM</span> S </span><br><span class="line"> <span class="keyword">WHERE</span> SN<span class="operator">=</span><span class="string">&#x27;李勇&#x27;</span>);</span><br><span class="line">#例<span class="number">2</span>: 检索选修C2课程的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S# <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> C#<span class="operator">=</span>‘C2’);</span><br><span class="line">#例<span class="number">3</span>: 检索选修C2课程的成绩最高的学生学号。</span><br><span class="line"><span class="keyword">SELECT</span> S#</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> C# <span class="operator">=</span> ‘C2’ <span class="keyword">AND</span> G <span class="operator">&gt;=</span> <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span> G <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> C# <span class="operator">=</span> <span class="string">&#x27;C2&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、用IN-NOT-IN检索"><a href="#2、用IN-NOT-IN检索" class="headerlink" title="2、用IN/NOT IN检索"></a>2、用IN/NOT IN检索</h4><ul><li><p>IN在嵌套子查询中最常使用。可代替<code>=ANY</code>，是集合运算 中的$\in$运算。</p></li><li><p>NOT IN表示不在集合中，与<code>!=ALL</code>相同，是集合运算 中的$\notin$运算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">4</span>: 检索选修C2课程的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S# <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> C#<span class="operator">=</span>‘C2’);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、用EXISTS检索"><a href="#3、用EXISTS检索" class="headerlink" title="3、用EXISTS检索"></a>3、用EXISTS检索</h4><ul><li><p>EXISTS表示存在量词$\exists$</p></li><li><p>表达式 EXISTS（子查询）当且仅当子查询结果为<strong>非空</strong>时为真</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">5</span>: 检索选修C2课程的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> S#<span class="operator">=</span>S.S# <span class="keyword">AND</span> C#<span class="operator">=</span>‘C2’);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、用NOT-EXISTS-检索"><a href="#4、用NOT-EXISTS-检索" class="headerlink" title="4、用NOT EXISTS 检索"></a>4、用NOT EXISTS 检索</h4><ul><li><p>表示“不存在”。 </p></li><li><p>表达式NOT EXISTS（子查询）在子查询结果为<strong>空</strong>时为真。</p></li><li><p>用NOT EXISTS表达全称量词（$\forall$）</p><ul><li>任何一个带有全称量词的谓词总可以转换为等价的带存在量词的谓词：$(\forall x)P \equiv \neg(\exists x(\neg P))$</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">6</span>：检索选修所有课程的学生姓名。</span><br><span class="line"># 本题等价于“检索这样的学生的姓名，不存在他不选修的课程”。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( # S.S#不选修的课程(不存在S.S#选修记录的课程） </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> C </span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( # S.S#选修C.C#的记录</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC</span><br><span class="line"> <span class="keyword">WHERE</span> S#<span class="operator">=</span>S.S# <span class="keyword">AND</span> C#<span class="operator">=</span>C.C#));</span><br></pre></td></tr></table></figure></li><li><p>用NOT EXISTS 表达蕴涵</p><ul><li>$p \rightarrow q \equiv \neg p \vee q$</li><li>$(\forall y) p \rightarrow q \equiv \neg(\exists y(\neg(p \rightarrow q))) \equiv \neg(\exists y(\neg(\neg p \vee q))) \equiv \neg \exists y(p \wedge \neg q)$</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 例<span class="number">7</span>：检索至少选修了学生S2选修的全部课程的学生学号。</span><br><span class="line"># 本题用蕴含表达：“检索这样学生的学号，对于任意课程，只要S2选修，他就选修。”</span><br><span class="line"># 本题等价于“检索这样学生的学号，不存在S2选修而他没有选修的课程”。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> S#</span><br><span class="line"><span class="keyword">FROM</span> SC SCX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( # S2选修而SCX.S#没有选修的课程（S2选修的课程并且不存在SCX.S#选修该课程的记录）</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC SCY</span><br><span class="line"> <span class="keyword">WHERE</span> SCY.S# <span class="operator">=</span> ‘S2’ <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ( # SCX.S#选修SCY.C#的记录</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC SCZ</span><br><span class="line"> <span class="keyword">WHERE</span> S# <span class="operator">=</span> SCX.S# <span class="keyword">AND</span> C# <span class="operator">=</span> SCY.C#));</span><br></pre></td></tr></table></figure></li></ul><h3 id="（六）并差交检索"><a href="#（六）并差交检索" class="headerlink" title="（六）并差交检索"></a>（六）并差交检索</h3><ul><li><p>并、差、交的SQL运算符： </p><ul><li>并：UNION </li><li>差：MINUS </li><li>交：INTERSECT</li></ul></li><li><p>并、差、交检索的操作对象必须是相容的， 是同类关系，即必须有相同数量的属性列， 且相应属性列的域也必须相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># eg1：检索选修了C1或C2课程的学生学号。</span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> C#<span class="operator">=</span><span class="string">&#x27;C1&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> C#<span class="operator">=</span><span class="string">&#x27;C2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>：检索无人选修的课程号和名称。</span><br><span class="line"><span class="keyword">SELECT</span> C#，CN <span class="keyword">FROM</span> C <span class="keyword">WHERE</span> C# <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> C# <span class="keyword">FROM</span> C </span><br><span class="line"> MINUS</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> C# <span class="keyword">FROM</span> SC);</span><br></pre></td></tr></table></figure></li></ul><h3 id="（七）库函数检索"><a href="#（七）库函数检索" class="headerlink" title="（七）库函数检索"></a>（七）库函数检索</h3><ul><li><p>库（集）函数 </p><ul><li><code>COUNT()</code> 按列值计个数，<code>COUNT(*)</code>对行记数 </li><li><code>SUM()</code> 对数值列求总和</li><li><code>AVG()</code>求数值列的平均值</li><li><code>MAX()</code>在列中找出最大值</li><li><code>MIN()</code>在列中找出最小值</li></ul></li><li><p>只能在SELECT子句以及HAVING子句中出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索学生总数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> S;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>：检索选修了课程的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> S#) <span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line">#例<span class="number">3</span>：求学号为S4的学生的总分和平均分。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(G)，<span class="built_in">AVG</span>(G)</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> S#<span class="operator">=</span><span class="string">&#x27;S4&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">4</span>：检索选修了C1课程的学生最高分。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(G) <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> C#<span class="operator">=</span><span class="string">&#x27;C1&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（八）分组检索"><a href="#（八）分组检索" class="headerlink" title="（八）分组检索"></a>（八）分组检索</h3><ul><li><p>按属性列（列组）将关系的元组分组，每组在这些分组属 性列（列组）上具有相同值，对每一组执行SELECT操作。 </p></li><li><p>分组子句： <code>GROUP BY 列名 [HAVING 条件表达式] ——分组条件</code></p></li><li><p>WHERE子句与HAVING子句 </p><ul><li>WHERE 子句是针对“行”进行，用于去掉不符合条件的若干行</li><li>HAVING子句针对“分组”进行，必须和GROUP BY 连用，用 于去掉不符合条件的若干分组。</li><li>在查询块中出现的顺序：<code>WHERE — GROUP BY — HAVING</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索至少选修三门课程的学生学号和选课门数。</span><br><span class="line"><span class="keyword">SELECT</span> S#，<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S#</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>：求选修四门以上课程的学生学号和总成绩（不统计不及格的课程）。最后按降序列出总成绩排序名单。</span><br><span class="line"><span class="keyword">SELECT</span> S#，SUM（G）</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> G<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S#</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">SUM</span>(G) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（九）算术表达式值的检索"><a href="#（九）算术表达式值的检索" class="headerlink" title="（九）算术表达式值的检索"></a>（九）算术表达式值的检索</h3><ul><li><p>SELECT子句中，可包括由属性列、常数、库函数、算 术运算符<code>+-*/</code>等组成的算术表达式。 </p></li><li><p>检索结果数据项名可用表达式表示或用“别名”来表示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：有职工表EMP( EMP#，EMPN，JOB，SALARY，BONUS，DEPT )，</span><br><span class="line">要求检索所有PROGRAMMER的奖金大于工资<span class="number">25</span><span class="operator">%</span>的职工姓名和一年的总收入，并按奖金与工资之比的降序排列。</span><br><span class="line"><span class="keyword">SELECT</span> EMPN，BONUS<span class="operator">/</span>SALARY BS, <span class="number">12</span><span class="operator">*</span>（SALARY<span class="operator">+</span>BONUS） TOTAL</span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> JOB<span class="operator">=</span><span class="string">&#x27;PROGRAMMER&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> BONUS<span class="operator">&gt;</span><span class="number">0.25</span><span class="operator">*</span>SALARY </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BONUS<span class="operator">/</span>SALARY <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（十）部分匹配查询"><a href="#（十）部分匹配查询" class="headerlink" title="（十）部分匹配查询"></a>（十）部分匹配查询</h3><ul><li><p>使用谓词LIKE 或NOT LIKE，一般形式： <code>&lt;列名&gt; LIKE/NOT LIKE &lt;字符串常量&gt;</code> </p><ul><li>– &lt;列名&gt;必须为字符型或变长字符型。 </li><li>– &lt;字符串常量&gt;可包含两个特殊符号 % 与_ <ul><li>%：代表任意序列的0个或多个字符； </li><li>_ ：代表任意单个字符</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索所有姓刘的学生的学号、姓名。</span><br><span class="line"><span class="keyword">SELECT</span> S#, SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> SN <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（十一）基于派生表的查询"><a href="#（十一）基于派生表的查询" class="headerlink" title="（十一）基于派生表的查询"></a>（十一）基于派生表的查询</h3><ul><li><p>当子查询出现在FROM子句中，则子查询生成的表称 为临时派生表，该表也可作为主查询的操作对象</p></li><li><p>AS 关键字可以省略，但必须为派生表指定别名</p></li><li><p>如果子查询中没有库函数，则派生表可不指定列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索每个学生超出自己平均成绩的课程号。</span><br><span class="line"><span class="keyword">SELECT</span> S#, C#</span><br><span class="line"><span class="keyword">FROM</span> SC, (</span><br><span class="line"><span class="keyword">SELECT</span> S#, <span class="built_in">AVG</span>(G) </span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S#) <span class="keyword">AS</span> AVG_SC(AVG_S#,AVG_G)</span><br><span class="line"><span class="keyword">WHERE</span> SC.S#<span class="operator">=</span>AVG_SC.AVG_S# <span class="keyword">AND</span> SC.G<span class="operator">&gt;=</span>AVG_SC.AVG_G</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、SQL数据定义功能"><a href="#二、SQL数据定义功能" class="headerlink" title="二、SQL数据定义功能"></a>二、SQL数据定义功能</h2><h3 id="（一）定义基本表"><a href="#（一）定义基本表" class="headerlink" title="（一）定义基本表"></a>（一）定义基本表</h3><ul><li><p>基本语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create Table &lt;表名&gt; (</span><br><span class="line">&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束&gt;] </span><br><span class="line">[&#123;,&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束&gt;]&#125;] </span><br><span class="line">[&#123;, [&lt;表级完整性约束&gt;]&#125;]</span><br><span class="line">); </span><br></pre></td></tr></table></figure></li><li><p>完整性约束 </p><ul><li>NULL/NOT NULL</li><li>UNIQUE</li><li>PRIMARY KEY</li><li>FOREIGN KEY</li><li>CHECK</li></ul></li><li><p>SQL92的数据类型</p><ul><li>char（n）：固定长度的字符串</li><li>varchar（n）：可变长字符串</li><li>int：整数</li><li>smallint：小整数类型</li><li>numeric（p，q）：定点数共p位，小数点右边q位</li><li>Real, double precision ：浮点数与双精度浮点数,精 度与机器有关</li><li>Float(n)：n位的精度浮点数。 </li><li>date：日期（年、月、日）</li><li>time：时间（小时、分、秒）</li><li>interval：两个date或time类型数据之间的差</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> S(</span><br><span class="line">S# <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">SN <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">SA <span class="type">int</span>,</span><br><span class="line">SD <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line"><span class="keyword">Primary</span> key(S#),</span><br><span class="line"><span class="keyword">Check</span> (SA <span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">and</span> SA <span class="operator">&lt;=</span><span class="number">45</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> SC(</span><br><span class="line">S# <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">C# <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">G number(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">Primary</span> key (S#, C#),</span><br><span class="line"><span class="keyword">Foreign</span> key (S#) <span class="keyword">references</span> S (S#),</span><br><span class="line"><span class="keyword">Foreign</span> key (C#) <span class="keyword">references</span> C (C#)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）修改、删除基本表定义"><a href="#（二）修改、删除基本表定义" class="headerlink" title="（二）修改、删除基本表定义"></a>（二）修改、删除基本表定义</h3><ul><li><p>基本语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#修改基本表</span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">Add</span> <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[<span class="operator">&lt;</span>完整性约束<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">Drop</span> <span class="operator">&lt;</span>完整性约束名<span class="operator">&gt;</span>]</span><br><span class="line">[Modify <span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>]</span><br><span class="line"></span><br><span class="line">#删除基本表</span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">Table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：S表增加“入学时间”属性</span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> S <span class="keyword">Add</span> Scome <span class="type">Date</span>;</span><br><span class="line">#例<span class="number">2</span>：将SA的数据类型改为半字长整数</span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> S Modify SA <span class="type">Smallint</span>;</span><br><span class="line">#例<span class="number">3</span>：删除s表</span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">Table</span> S;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）定义、删除索引"><a href="#（三）定义、删除索引" class="headerlink" title="（三）定义、删除索引"></a>（三）定义、删除索引</h3><ul><li><p>基本语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义索引</span><br><span class="line"><span class="keyword">Create</span> [<span class="keyword">Unique</span>][Cluster] Index <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="keyword">On</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> (<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[次序][, <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[次序]] …);</span><br><span class="line">#删除索引</span><br><span class="line"><span class="keyword">Drop</span> Index <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Unique</span> Index Scno <span class="keyword">On</span> SC(S# <span class="keyword">ASC</span>, C# <span class="keyword">DESC</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Drop</span> Index Stusno;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（四）定义视图"><a href="#（四）定义视图" class="headerlink" title="（四）定义视图"></a>（四）定义视图</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#定义视图</span><br><span class="line">##语法： </span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">View</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span></span><br><span class="line">[(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>] …)]</span><br><span class="line"><span class="keyword">As</span> <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">With</span> <span class="keyword">Check</span> Option]</span><br><span class="line"></span><br><span class="line">##示例：建立计算机系的学生视图</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">View</span> CS_Student</span><br><span class="line"><span class="keyword">As</span></span><br><span class="line"><span class="keyword">SELECT</span> S#, SN, SA <span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> SD <span class="operator">=</span> ‘CS’ ；</span><br><span class="line"></span><br><span class="line">#删除视图</span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">View</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="（五）查询视图"><a href="#（五）查询视图" class="headerlink" title="（五）查询视图"></a>（五）查询视图</h3><ul><li>参考基本表的查询</li></ul><h2 id="三、SQL数据更新"><a href="#三、SQL数据更新" class="headerlink" title="三、SQL数据更新"></a>三、SQL数据更新</h2><h3 id="（一）插入数据"><a href="#（一）插入数据" class="headerlink" title="（一）插入数据"></a>（一）插入数据</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#插入单个元组</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>[&#123;,<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>&#125;])]</span><br><span class="line"><span class="keyword">Values</span>(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>[&#123;,<span class="operator">&lt;</span>值<span class="operator">&gt;</span>&#125;])</span><br><span class="line">##示例：<span class="keyword">Insert</span> <span class="keyword">Into</span> S <span class="keyword">Values</span> (‘S10’, ‘陈冬’, ‘<span class="keyword">IS</span>’, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">#插入子查询结果</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>[&#123;,<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>&#125;])] <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line">##示例</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> Dept_Age (Sdept, Avgage)</span><br><span class="line"><span class="keyword">Select</span> SD, <span class="built_in">AVG</span>(SA) <span class="keyword">From</span> S</span><br><span class="line"><span class="keyword">Group</span> <span class="keyword">By</span> SD;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）修改数据"><a href="#（二）修改数据" class="headerlink" title="（二）修改数据"></a>（二）修改数据</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">Update</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">Set</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[&#123;, <span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>&#125;]</span><br><span class="line">[<span class="keyword">Where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br><span class="line">#示例：将学生S1的年龄改为<span class="number">22</span>岁</span><br><span class="line"><span class="keyword">Update</span> S</span><br><span class="line"><span class="keyword">Set</span> SA <span class="operator">=</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">Where</span> S#<span class="operator">=</span>‘S1’;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）删除数据"><a href="#（三）删除数据" class="headerlink" title="（三）删除数据"></a>（三）删除数据</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#语法 </span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [<span class="keyword">Where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br><span class="line">#示例：</span><br><span class="line">– 例<span class="number">1</span>：删除学号为S19的学生的记录</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> S <span class="keyword">Where</span> S#<span class="operator">=</span>‘S19’;</span><br><span class="line">– 例<span class="number">2</span>：删除所有学生的选课记录</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> SC;</span><br><span class="line">– 例<span class="number">3</span>：删除计算机系所有学生的选课记录</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> SC</span><br><span class="line"><span class="keyword">Where</span> ‘CS’ <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">Select</span> SD <span class="keyword">From</span> S</span><br><span class="line"><span class="keyword">Where</span> S .S# <span class="operator">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、SQL数据控制功能"><a href="#四、SQL数据控制功能" class="headerlink" title="四、SQL数据控制功能"></a>四、SQL数据控制功能</h2><ul><li>定义完整性约束条件：支持事务操作、提供安全控制功能 <ul><li>授权 <code>GRANT &lt;权限&gt; [ON &lt;对象类型&gt; &lt;对象名&gt;] TO &lt;用户&gt;</code></li><li>收回权限 <code>REVOKE &lt;权限&gt; [ON &lt;对象类型&gt; &lt;对象名&gt;]  FROM &lt;用户&gt;</code></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BP神经网络</title>
      <link href="/2022/09/04/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/09/04/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><ul><li>BP(back propagation)神经网络是1986年由Rumelhart和McClelland为首的科学家提出的概念，是一种按照误差逆向传播算法训练的多层前馈神经网络，是应用最广泛的神经网络模型之一 。Minsky和Papert在颇具影响力的”perceptron” 一书中指出，简单的感知器只能求解线性问题，能够求解非线性问题的网络应该具有感知层，但是对隐藏层神经元的学习规则还没有合理的理论依据。</li></ul><h3 id="相关定义与原理"><a href="#相关定义与原理" class="headerlink" title="相关定义与原理"></a>相关定义与原理</h3><ul><li><p>基本原理</p><p>利用输出后的误差来估计输出层直接前层的误差，再利用这个误差估计更前一层的误差，如此递归</p></li><li><p>结构示意图<img src="https://s3.bmp.ovh/imgs/2022/09/04/55543f51f53ae0db.bmp" alt=""></p></li><li><p>符号定义及相关运算</p><p>假设输入层有n个神经元，隐含层有p个神经元，输出层含有q个神经元</p><ul><li><p>输入向量 $x = (x_1, x_2, x_3,…x_n)$</p></li><li><p>隐含层输入向量$hi = (hi_1, hi_2, hi_3,…hi_p)$</p></li><li><p>隐含层输出向量$ho = (ho_1, ho_2, ho_3,…ho_p)$</p></li><li><p>输出层输入向量$yi = (yi_1, yi_2, yi_3,…yi_q)$ </p></li><li><p>输出层输出向量$yo = (yo_1, yo_2, yo_3,…yo_q)$</p></li><li><p>输入层与中间层的连接权值$w_{ih}$</p></li><li><p>隐含层与输出层的连接权值$w_{ho}$</p></li><li><p>隐含层各神经元的阈值$b_h$</p></li><li><p>输出层各神经元的阈值$b_o$</p></li><li><p>样本数据个数$k=1,2,3,…m$</p></li><li><p>期望输出向量$d = (d_1, d_2,d_3,…d_q)$</p></li><li><p>误差函数$e=\frac{1}{2} \sum_{i=0}^{q} (d_i(k) - yo_i(k))^2$（第k个输入样本）</p></li><li><p>激活函数$f(x)$</p></li><li><p>动量因子：BP神经网络在批处理训练时会陷入局部最小，这个时候加入一个动量因子有助于其反馈的误差信号使神经元的权值重新振荡起来</p></li><li><p>偏置结点：偏置结点是为了描述训练数据中没有的特征，偏置结点对于下一层的每一个结点的权重的不同而生产不同的偏置，于是可以认为偏置是每一个结点（除输入层外）的属性</p></li><li><p>推导过程</p><ul><li><p>随机选择第k个输入样本和其对应的期望输出</p><script type="math/tex; mode=display">\displaylines{  x(k) = \{x_1(k), x_2(k), x_3(k),...x_n(k)\}\\    d(k) = \{d_1(k), d_2(k), d_3(k),...d_q(k)\}}</script></li><li><p>计算隐含层的各个神经元的输入和输出</p><script type="math/tex; mode=display">\displaylines{&h i_h(k)=\sum_{i=1}^n w_{i h} x_i(k)-b_h \quad h=1,2, \cdots, p\\&h o_h(k)=f\left(h i_h(k)\right) \quad h=1,2, \cdots, p\\&y i_o(k)=\sum_{h=1}^p w_{h o} h o_h(k)-b_o \quad o=1,2, \cdots q\\&y o_o(k)=f\left(yi_o(k)\right) \quad o=1,2, \cdots, q\\}</script></li><li><p>利用网络期望输出和实际输出，计算误差函数e对输出层的各神经元的偏导数</p><script type="math/tex; mode=display">\displaylines{\frac{\partial e}{\partial w_{h o}}=\frac{\partial e}{\partial y i_o} \frac{\partial y i_o}{\partial w_{h o}} \quad \\\frac{\partial y i_o(k)}{\partial w_{h o}}=\frac{\partial\left(\sum_h^p w_{h o} h o_h(k)-b_o\right)}{\partial w_{h o}}=h o_h(k) \\\frac{\partial e}{\partial y i_o}=\frac{\partial\left(\frac{1}{2} \sum_{o=1}^q\left(d_o(k)-y o_o(k)\right)\right)^2}{\partial y i_o}=-\left(d_o(k)-y o_o(k)\right) y o_o^{\prime}(k)\\= -\left(d_o(k)-y o_o(k)\right) f'(yi_o(k)) = -\delta_o(k)}</script></li><li><p>利用输出层各神经元的<script type="math/tex">\delta_o(k)</script>和隐含层各神经元的输出来修正连接权值<script type="math/tex">w_{ho}(k)</script>，<script type="math/tex">\mu</script>是设置的学习率</p></li></ul><script type="math/tex; mode=display">\displaylines{\Delta w_{ho}(k) = -\mu \frac{\partial e}{\partial w_{ho}} = \mu\delta_0(k)ho_h(k) \\w^{N+1}_{ho} = w^{N}_{ho} + \Delta w_{ho}(k)}</script><ul><li><p>利用隐含层各神经元的$\delta_o(k)$和输入层的输入来修正输出层的连接权$w_{ho}(k)$</p><script type="math/tex; mode=display">\displaylines{\Delta w_{i h}(k)=-\mu \frac{\partial e}{\partial w_{i h}}=-\mu \frac{\partial e}{\partial yi_o}\frac{\partial yi_o}{\partial ho_h(k)}\frac{\partial ho_h(k)}{\partial hi_h(k)}\frac{\partial h i_h(k)}{\partial w_{i h}}\\\frac{\partial e}{\partial yi_o}= \delta_o(k),\quad \frac{\partial yi_o}{\partial ho_h(k)} = w_{ho},\quad\frac{\partial ho_h(k)}{\partial hi_h(k)} = f'(hi_h(k))\\令\delta_h(k) = \delta_o(k)w_{ho}f'(hi_h(k))\\所以\Delta w_{i h}(k)=\mu\delta_h(k) x_i(k) \\w_{i h}^{N+1}=w_{i h}^N+\mu \delta_h(k) x_i(k)}</script></li><li><p>p.s.：求导时需要利用链式求导法则</p></li><li><p>全局误差</p><script type="math/tex; mode=display">  E = \frac{1}{2m}\sum_{k=1}^{m}\sum_{i=1}^{n}(d_i(k) - yo_i(k))^2</script></li></ul></li></ul></li></ul><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derived_sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_matrix</span>(<span class="params">m, n, fill=<span class="number">0.0</span></span>):  <span class="comment"># m行n列</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        a.append([fill] * n)</span><br><span class="line">    <span class="keyword">return</span> np.array(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># neural network class 4 layer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">neuralNetwork</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize the neural network</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_nodes, hidden_nodes, hidden2_nodes, output_nodes, learning_rate=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The network consists of three layers: input layer, hidden layer and output layer.</span></span><br><span class="line"><span class="string">        Here defined these layers.</span></span><br><span class="line"><span class="string">        :param input_nodes: dimension of input</span></span><br><span class="line"><span class="string">        :param hidden_nodes: dimension of hidden nodes</span></span><br><span class="line"><span class="string">        :param output_nodes: dimension of output</span></span><br><span class="line"><span class="string">        :param learning_rate: the learning rate of neural network</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        self.x_num = input_nodes + <span class="number">1</span>  <span class="comment"># 添加一个偏置</span></span><br><span class="line">        self.h_num = hidden_nodes</span><br><span class="line">        self.h2_num = hidden2_nodes</span><br><span class="line">        self.y_num = output_nodes</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化向量</span></span><br><span class="line">        self.x_vector = np.array([<span class="number">0.0</span>] * self.x_num)</span><br><span class="line">        self.hi_vector = np.array([<span class="number">0.0</span>] * self.h_num)</span><br><span class="line">        self.ho_vector = np.array([<span class="number">0.0</span>] * self.h_num)</span><br><span class="line">        self.h2i_vector = np.array([<span class="number">0.0</span>] * self.h2_num)</span><br><span class="line">        self.h2o_vector = np.array([<span class="number">0.0</span>] * self.h2_num)</span><br><span class="line">        self.yi_vector = np.array([<span class="number">0.0</span>] * self.y_num)</span><br><span class="line">        self.yo_vector = np.array([<span class="number">0.0</span>] * self.y_num)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化权值矩阵</span></span><br><span class="line">        <span class="comment"># 输入数据到隐藏层输入的变换矩阵</span></span><br><span class="line">        self.weight_xh = (np.random.random([self.x_num, self.h_num]) - <span class="number">0.51</span>)  </span><br><span class="line">        <span class="comment"># 隐藏层间的变换矩阵</span></span><br><span class="line">        self.weight_hh2 = (np.random.random([self.h_num, self.h2_num]) - <span class="number">0.51</span>)</span><br><span class="line">        <span class="comment"># 隐藏层输出到输出层输入的变换矩阵</span></span><br><span class="line">        self.weight_h2y = (np.random.random([self.h2_num, self.y_num]) - <span class="number">0.51</span>)</span><br><span class="line">        <span class="comment"># 学习率</span></span><br><span class="line">        self.lr = learning_rate</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 动量因子</span></span><br><span class="line">        self.input_correction = make_matrix(self.x_num, self.h_num)</span><br><span class="line">        self.hidden_correction = make_matrix(self.h_num, self.h2_num)</span><br><span class="line">        self.output_correction = make_matrix(self.h2_num, self.y_num)</span><br><span class="line"><span class="comment"># 动量因子影响率</span></span><br><span class="line">        self.m = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_feature</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Forward the neural network</span></span><br><span class="line"><span class="string">        :param input_feature: single input image, flattened [784, ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(input_feature) != self.x_num - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;输入数据与输入结点数量不同&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 简单的处理一下输入数据</span></span><br><span class="line">        self.x_vector[<span class="number">1</span>:self.x_num] = input_feature</span><br><span class="line">        self.x_vector = np.array(self.x_vector)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输入层-&gt;隐藏层</span></span><br><span class="line">        self.hi_vector = np.dot(self.x_vector, self.weight_xh)</span><br><span class="line">        <span class="comment"># print(self.hi_vector)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 激活隐藏层神经元</span></span><br><span class="line">        self.ho_vector = np.array(sigmoid(self.hi_vector))</span><br><span class="line">        <span class="comment"># print(self.ho_vector)</span></span><br><span class="line"></span><br><span class="line">        self.h2i_vector = np.dot(self.ho_vector, self.weight_hh2)</span><br><span class="line"></span><br><span class="line">        self.h2o_vector = np.array(sigmoid(self.h2i_vector))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 隐藏层-&gt;输出层</span></span><br><span class="line">        self.yi_vector = np.dot(self.h2o_vector, self.weight_h2y)</span><br><span class="line">        <span class="comment"># print(self.yi_vector)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 激活输出层神经元</span></span><br><span class="line">        self.yo_vector = np.array(sigmoid(self.yi_vector))</span><br><span class="line">        <span class="comment"># print(self.yo_vector)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.yo_vector</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backpropagation</span>(<span class="params">self, targets_list</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Propagate backwards</span></span><br><span class="line"><span class="string">        :param targets_list: output onehot code of a single image, [10, ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(targets_list) != self.y_num:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;标记数量与输出数量不符&quot;</span>)</span><br><span class="line"></span><br><span class="line">        targets = np.array(targets_list)  <span class="comment"># 简单处理输入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算误差</span></span><br><span class="line">        error = <span class="number">0.5</span> * np.dot((targets - self.yo_vector).T,</span><br><span class="line">                             (targets - self.yo_vector))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算残差</span></span><br><span class="line">        delta_h2y = np.array((targets - self.yo_vector) </span><br><span class="line">                             * derived_sigmoid(self.yo_vector))</span><br><span class="line">        delta_hh2 = np.array(np.dot(delta_h2y, self.weight_h2y.T) </span><br><span class="line">                             * derived_sigmoid(self.h2o_vector))</span><br><span class="line">        delta_xh = np.array(np.dot(delta_hh2, self.weight_hh2.T) </span><br><span class="line">                            * derived_sigmoid(self.ho_vector))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新权值</span></span><br><span class="line">        <span class="comment"># print(self.weight_xh)</span></span><br><span class="line">        self.weight_h2y += self.lr </span><br><span class="line">        * np.dot(delta_h2y.reshape(-<span class="number">1</span>, <span class="number">1</span>),self.h2o_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T </span><br><span class="line">        + self.m * self.output_correction</span><br><span class="line"></span><br><span class="line">        self.weight_hh2 += self.lr </span><br><span class="line">        * np.dot(delta_hh2.reshape(-<span class="number">1</span>, <span class="number">1</span>),self.hi_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T </span><br><span class="line">        + self.m * self.hidden_correction</span><br><span class="line"></span><br><span class="line">        self.weight_xh += self.lr </span><br><span class="line">        * np.dot(delta_xh.reshape(-<span class="number">1</span>, <span class="number">1</span>),self.x_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T </span><br><span class="line">        + self.m * self.input_correction</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        self.output_correction = self.lr </span><br><span class="line">        * np.dot(delta_h2y.reshape(-<span class="number">1</span>, <span class="number">1</span>), self.h2o_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T</span><br><span class="line">        self.hidden_correction = self.lr </span><br><span class="line">        * np.dot(delta_hh2.reshape(-<span class="number">1</span>, <span class="number">1</span>), self.ho_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T</span><br><span class="line">        self.input_correction = self.lr </span><br><span class="line">        * np.dot(delta_xh.reshape(-<span class="number">1</span>, <span class="number">1</span>), self.x_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T</span><br><span class="line">        <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 常用数学符号和公式</title>
      <link href="/2022/08/31/Markdown-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/08/31/Markdown-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Cmd-Markdown-公式指导手册"><a href="#Cmd-Markdown-公式指导手册" class="headerlink" title="Cmd Markdown 公式指导手册"></a>Cmd Markdown 公式指导手册</h1><p><a href="https://ericp.cn/cmd">https://ericp.cn/cmd</a></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
