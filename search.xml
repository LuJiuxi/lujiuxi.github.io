<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库理论</title>
      <link href="/2022/11/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA/"/>
      <url>/2022/11/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>形式语言与自动机理论</title>
      <link href="/2022/11/17/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
      <url>/2022/11/17/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编译技术笔记</title>
      <link href="/2022/11/17/%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/17/%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概论"><a href="#一、概论" class="headerlink" title="一、概论"></a>一、概论</h1><h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="(一)基本概念"></a>(一)基本概念</h2><ul><li><p>源程序：用<strong>汇编语言</strong>或<strong>高级语言</strong>编写的程序称为源程序</p></li><li><p>目标程序：用<strong>目标语言</strong>所表示的程序。</p><ul><li>目标语言：可以是介于源语言和机器语言之间的 “中间语言”，可以是某种机器的<strong>机器语言</strong>，也可以是某机器的<strong>汇编语言</strong></li></ul></li><li><p>翻译程序：将源程序转换为目标程序的程序称为翻译程序。 它是指各种语言的<strong>翻译器</strong>，包括<strong>汇编程序</strong>和<strong>编译程序</strong>，是汇编程序、编译程序以及各种变换程序的总称</p></li><li><p>汇编程序：若源程序用<strong>汇编语言</strong>书写，经过翻译程序得到用机器语言表示的程序，这时的翻译程序就称之为汇编程序，这种翻译过程称为“汇编”(Assemble）</p></li><li><p>编译程序：若源程序是用<strong>高级语言</strong>书写，经加工后得到目标程序， 这种翻译过程称“编译”（Compile)</p></li><li>解释程序：（Interpreter） 对源程序进行<strong>解释执行</strong>的程序</li></ul><h2 id="二-编译过程与编译器构造"><a href="#二-编译过程与编译器构造" class="headerlink" title="(二)编译过程与编译器构造"></a>(二)编译过程与编译器构造</h2><h3 id="1、编译过程"><a href="#1、编译过程" class="headerlink" title="1、编译过程"></a>1、编译过程</h3><ul><li>编译过程是指将<strong>高级语言程序</strong>翻译为等价的<strong>目标程序</strong>的过程</li></ul><h4 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="(1)词法分析"></a>(1)词法分析</h4><ul><li><p>任务：分析和识别单词</p><ul><li>源程序是由字符序列构成的，词法分析扫描源程序(字符串)，根据语言的<strong>词法规则</strong>分析并识别单词，并以某种编码形式输出。</li></ul></li><li><p>单词：是语言的基本语法单位，一般语言有四大类单词</p><ul><li>保留字或关键字：begin、end、if、for、while…</li><li>标识符</li><li>常量</li><li>分界符和运算符：{、}、[、]、+、-、*、/、…</li></ul></li></ul><h4 id="2-语法分析"><a href="#2-语法分析" class="headerlink" title="(2)语法分析"></a>(2)语法分析</h4><ul><li>任务：根据语法规则（即语言的文法），分析并识别出各种<strong>语法成分</strong>，如表达式、各种说明、各种语句、 过程、函数等，并进行语法<strong>正确性检查</strong>。</li></ul><h4 id="3-语义分析、生成中间代码"><a href="#3-语义分析、生成中间代码" class="headerlink" title="(3)语义分析、生成中间代码"></a>(3)语义分析、生成中间代码</h4><ul><li>任务：对识别出的各种语法成分进行语义分析， 并产生相应的中间代码</li><li>中间代码：一种介于<strong>源语言</strong>和<strong>目标语言</strong>之间的中间语言形式<ul><li>生成中间代码的目的： <ul><li>1、便于做优化处理； </li><li>2、便于编译程序的移植</li></ul></li><li>中间代码的形式：编译程序设计者可以自己设计，常用的有<strong>四元式、三元式、逆波兰表示</strong>等</li></ul></li></ul><h4 id="4-代码优化"><a href="#4-代码优化" class="headerlink" title="(4)代码优化"></a>(4)代码优化</h4><ul><li>任务：目的是为了得到高质量的目标程序</li></ul><h4 id="5-生成目标程序"><a href="#5-生成目标程序" class="headerlink" title="(5)生成目标程序"></a>(5)生成目标程序</h4><ul><li>任务：由中间代码很容易生成目标程序（地址指令序列）。这部分工作<strong>与机器关系密切</strong> ，所以要根据机器进行。在做这部分工作时（要注意充分利用累加器），也可以进行<strong>优化处理</strong>。</li></ul><h3 id="2、编译程序构造"><a href="#2、编译程序构造" class="headerlink" title="2、编译程序构造"></a>2、编译程序构造</h3><h4 id="1-编译程序的逻辑结构"><a href="#1-编译程序的逻辑结构" class="headerlink" title="(1)编译程序的逻辑结构"></a>(1)编译程序的逻辑结构</h4><ul><li><p>划分为5个基本阶段，7个逻辑部分</p><p><img src="https://s3.uuu.ovh/imgs/2022/11/18/f801dd22b223801c.jpg" alt=""></p></li></ul><h4 id="2-多层中间表示和遍"><a href="#2-多层中间表示和遍" class="headerlink" title="(2)多层中间表示和遍"></a>(2)多层中间表示和遍</h4><ul><li>遍：对源程序（包括源程序中间形式）从头到尾扫描一次，并做有关的加工处理 ，生成新的源程序中间形式或目标程序，通常称之为一遍。</li></ul><h4 id="3-前端和后端"><a href="#3-前端和后端" class="headerlink" title="(3)前端和后端"></a>(3)前端和后端</h4><ul><li><p>前端：通常将与源程序有关的编译部分称为前端。 词法分析、语法分析、语义分析、中间代码生成、代码优化</p><ul><li>分析部分 </li><li>特点：与源语言有关</li></ul></li><li><p>后端：与目标机有关的部分称为后端。 目标程序生成（与目标机有关的优化）</p><ul><li>综合部分 </li><li>特点：与目标机有关</li></ul><p><img src="https://s3.uuu.ovh/imgs/2022/11/18/c096e71f13db8fb9.jpg" alt=""></p></li></ul><h1 id="二、文法和语言"><a href="#二、文法和语言" class="headerlink" title="二、文法和语言"></a>二、文法和语言</h1><h2 id="一-形式语言基础（只包含重要概念）"><a href="#一-形式语言基础（只包含重要概念）" class="headerlink" title="(一)形式语言基础（只包含重要概念）"></a>(一)形式语言基础（只包含重要概念）</h2><ul><li><p>符号串集合的闭包运算：设A是符号串集合，定义$A^＋ ＝ A^1 ∪ A^2 ∪ A^3 ∪……∪ A^n ∪……$称为集合A的正闭包。 $A^* ＝ A^0 ∪ A^＋$称为集合A的闭包</p></li><li><p>语言的句子：B为单词集，句子是定义在B上的符号串。 若令C为句子集合，则$C \subset B^*$ </p></li></ul><h2 id="二-文法（Grammer）"><a href="#二-文法（Grammer）" class="headerlink" title="(二)文法（Grammer）"></a>(二)文法（Grammer）</h2><ul><li><p>1、<strong>文法</strong>是对语言结构的定义与描述，即从形式上用于描述和规定语言结构的称为“文法”</p><ul><li>未涉及语义问题</li></ul></li><li><p>2、语法规则：我们通过建立一组规则，来描述句子的语法结构。 规定用“::=”表示“由…组成”</p></li><li><p>3、由规则推导句子：有了一组规则之后，可以按照一定的方式用它们去推导或产生<strong>句子</strong>。</p></li><li>4、推导方法：从一个要识别的符号开始推导，即用相应规则的右部来替代规则的左部，每次仅用一条规则去进行推导。<ul><li>有若干语法成分同时存在时，我们总是从最左的语法成 分进行推导，这称之为<strong>最左推导</strong>，类似的有<strong>最右推导</strong>(还有<strong>一般推导</strong>）</li><li>从一组语法规则可推出不同的句子</li></ul></li><li>5、语法（推导）树：我们用语法（推导）树来描述一个句子的语法结构</li></ul><h2 id="三-文法和语言的形式定义"><a href="#三-文法和语言的形式定义" class="headerlink" title="(三)文法和语言的形式定义"></a>(三)文法和语言的形式定义</h2><h3 id="1、文法的定义"><a href="#1、文法的定义" class="headerlink" title="1、文法的定义"></a>1、文法的定义</h3><ul><li>文法$G=(Vn, Vt, P, S)$<ul><li>$Vn$：非终结符号集 </li><li>$Vt$：终结符号集 </li><li>$P$：产生式或规则的集合 </li><li>$S$：开始符号（识别符号）$S\in Vn$</li></ul></li><li>规则的定义： 规则是一个有序对$(U, x)$，通常写为:  $U ::= x$ 或$U \rightarrow x,\quad|U| = 1,\quad |x| \geq 0$</li></ul><h3 id="2、推导的形式定义"><a href="#2、推导的形式定义" class="headerlink" title="2、推导的形式定义"></a>2、推导的形式定义</h3><ul><li><p>1、定义单步推导</p><p>文法$G:v＝xUy,\quad w＝xuy$,  </p><p>其中$x,y \in V^<em>,\quad U \in V_n, \quad u \in V^</em> $,  </p><p>若$U ::= u\in P$，则$v \overset{G}{\Longrightarrow} w$</p><p>若$x＝y＝\varepsilon$, 有$U::=u$，则$U\overset{G}{\Longrightarrow}u$</p></li><li><p>2、定义多步推导（+）</p><p>文法$G,\quad u^0 , u^1 , u^2 , ……,u^n \in V^+$</p><p>$if\quad v= u0\overset{G}{\Longrightarrow}u^1\overset{G}{\Longrightarrow}u^2 ……\overset{G}{\Longrightarrow}u^n＝w$，则$v\underset{G}{\overset{+}{\Longrightarrow}}w$</p></li><li><p>3、定义多步推导（*）</p><p>文法$G,\quad u^0 , u^1 , u^2 , ……,u^n \in V^+$</p><p>$if\quad v\underset{G}{\overset{+}{\Longrightarrow}}w$，或$v = w$，则$v\underset{G}{\overset{*}{\Longrightarrow}}w$</p></li><li><p>4、规范推导：</p><p>有$xUy \Rightarrow xuy$, 若$y\in V_t^*$,  则此推导为规范的，记为 $x U y \nRightarrow x u y$</p><p>直观意义：规范推导＝最右推导</p><p>最右推导：若规则右端符号串中有两个以上的非终结符时，先推右边的。 </p><p>最左推导：若规则右端符号串中有两个以上的非终结符时，先推左边的。</p></li></ul><h3 id="3、语言的形式定义"><a href="#3、语言的形式定义" class="headerlink" title="3、语言的形式定义"></a>3、语言的形式定义</h3><ul><li>句型：x是句型，则$Z\overset{<em>}{\Longrightarrow}x$且$x \in V^</em> $，即文法推出的符号串</li><li><p>句子：x是句子，则$Z\overset{<em>}{\Longrightarrow}x$且$x \in V^</em>_t $，即文法推出的终结符串</p></li><li><p>语言：$L(G[Z]) = \{x | x \in V_t^*,Z\overset{+}{\Longrightarrow}x\}$，即文法推出的句子的集合</p></li><li>形式语言理论可以证明以下两点<ul><li>已知文法，求语言，通过推导</li><li>已知语言，构造文法，无形式化方法，更多是凭经验</li></ul></li></ul><h3 id="4、递归文法"><a href="#4、递归文法" class="headerlink" title="4、递归文法"></a>4、递归文法</h3><ul><li>递归规则：规则右部有与左部相同的符号（非终结符）<ul><li>对于$U::= xUy$ </li><li>若$x=ε$, 即$U::= Uy$， 左递归 </li><li>若$y=ε$, 即$U::= xU$， 右递归 </li><li>若$x, y≠ε$，即$U::= xUy$，自嵌入递归</li></ul></li><li>递归文法：文法$G$，存在$U∈V_n$<ul><li>$if\quad U\overset{+}{\Longrightarrow}…U…$, 则G为递归文法</li><li>$if\quad U\overset{+}{\Longrightarrow}U…$, 则G为左递归文法</li><li>$if\quad U\Longrightarrow…U$, 则G为右递归文法</li></ul></li><li>递归文法的优点：可用有穷条规则，定义无穷语言</li><li>左递归文法的缺点：不能用自顶向下的方法来进行语法分析</li></ul><h2 id="四-文法构造"><a href="#四-文法构造" class="headerlink" title="(四)文法构造"></a>(四)文法构造</h2><ul><li>不是重点，先跳过 // TODO</li></ul><h2 id="五-短语、简单短语和句柄（重点）"><a href="#五-短语、简单短语和句柄（重点）" class="headerlink" title="(五)短语、简单短语和句柄（重点）"></a>(五)短语、简单短语和句柄（重点）</h2><ul><li><p>给定文法$G[Z]$，$w = xuy∈V^+$，为该文法的句型</p><ul><li>若 $Z \overset{<em>}{\Longrightarrow} xUy$，且$U \overset{+}{\Longrightarrow} u$, 则u是句型w相对于U的<em>*短语</em></em></li><li>若 $Z \overset{<em>}{\Longrightarrow} xUy$，且$U\Longrightarrow u$, 则u是句型w相对于U的<em>*简单短语</em></em></li><li><strong>直观理解</strong>：短语u 是目标句型w的一部分或全部，是推导过程 的前面某个句型(xUy)中的某个非终结符(U)所能推出的符号串，简单短语是一步推导得出的短语</li><li>任何句型本身一定是相对于识别符号Z的短语</li></ul></li><li><p>任一句型的最左简单短语称为该句型的<strong>句柄</strong></p></li><li><strong>注意</strong>：短语、简单短语是相对于句型而言的，一个句型 可能有多个短语、简单短语，而句柄只能有一个</li></ul><h2 id="六-语法树（推导树）"><a href="#六-语法树（推导树）" class="headerlink" title="(六)语法树（推导树）"></a>(六)语法树（推导树）</h2><h3 id="1、语法树与二义性文法"><a href="#1、语法树与二义性文法" class="headerlink" title="1、语法树与二义性文法"></a>1、语法树与二义性文法</h3><h4 id="1-语法树"><a href="#1-语法树" class="headerlink" title="(1)语法树"></a>(1)语法树</h4><ul><li><p>1、语法（推导）树：句子( 句型）结构的图示表示法，它是有向图，由结点和有向边组成</p><ul><li>结点：符号 <ul><li>根结点： 识别符号（非终结符） </li><li>中间结点：非终结符 </li><li>叶结点： 终结符或非终结符</li></ul></li><li>有向边：表示结点间的派生关系</li></ul></li><li><p>2、句型的推导及语法树的生成（自顶向下）</p><ul><li>简单，有什么难的（doge）</li><li><strong>注意</strong>：文法所能产生的句子，可以 用不同的推导序列（使用产生式顺序不同）将其推导出来。语法树的生长过程不同，但最终生成的<strong>语法树形状完全相同</strong></li></ul></li><li><p>3、子树与短语</p><ul><li>子树：语法树中的某个结点（子树的根）连同它向下 派生的部分所组成</li><li><span id = "短语的查找方案">定理：某子树的末端结点按自左向右顺序为句型中的符号串，则该符号串为该句型的相对于该子树根的<strong>短语</strong>（用这个找短语比较快）</span></li></ul></li><li><p>4、树与推导</p></li><li><p>由推导构造语法树</p><pre><code>  - 从识别符号开始，自左向右建立推导序列。   - 由根结点开始，自上而下建立语法树</code></pre><ul><li>由语法树构造推导<ul><li>自下而上地修剪子树的某些末端结点（短语），直至 把整棵树剪掉（留根），每剪一次对应一次归约</li><li>从句型开始，自右向左地逐步进行归约，建立推导序列</li><li>通常我们每次都剪掉当前句型的句柄（最左简单短语） 即每次均进行规范归约</li></ul></li><li>定义：对句型中最左简单短语（句柄）进行的归约称为<strong>规范归约</strong></li></ul></li><li><p>定义：通过规范推导或规范归约所得到的句型称为<strong>规范句型</strong></p></li></ul><h4 id="2-二义性文法"><a href="#2-二义性文法" class="headerlink" title="(2)二义性文法"></a>(2)二义性文法</h4><ul><li>文法的二义性<ul><li>若对于一个文法的某一句子（或句型） 存在两棵<strong>不同的语法树</strong>，则该文法是<strong>二义性文法</strong>， 否则是无二义性文法</li><li>若一个文法的某句子存在两个<strong>不同的规范推导</strong>，则该文法是二义性的，否则是无二义性的</li><li>若一个文法的某规范句型的<strong>句柄不唯一</strong>，则该文法 是二义性的，否则是无二义性的</li><li>换而言之，无二义性文法的句子只有一棵语法树，尽管推导过程可以不同</li></ul></li><li>文法的二义性是不可判定的</li></ul><h2 id="七-文法的其它表示法"><a href="#七-文法的其它表示法" class="headerlink" title="(七)文法的其它表示法"></a>(七)文法的其它表示法</h2><ul><li><p>1、扩充的BNF表示 </p><ul><li>BNF的元符号： &lt; , &gt;, ::= , | </li><li>扩充的BNF的元符号： &lt; , &gt;, ::= , | , { , } , [ , ] , ( , )</li></ul></li><li><p>2、语法图</p><p>  <img src="https://s3.uuu.ovh/imgs/2022/11/23/97a4206f099a90b8.jpg" alt=""></p></li></ul><h2 id="八-乔姆斯基文法体系"><a href="#八-乔姆斯基文法体系" class="headerlink" title="(八)乔姆斯基文法体系"></a>(八)<span id = "乔姆斯基文法体系">乔姆斯基文法体系</span></h2><ul><li><p>文法和语言分类：0型、1型、2型、3型 这几类文法的差别在于对产生式（语法规则）施加不同的限制</p></li><li><p>0型文法</p><ul><li>$P: u ::= v$ 其中 $u∈V^＋,v∈V^*,V = V_n∪V_t$</li><li>0型文法称为<strong>短语结构文法</strong>。规则的左部和右部都可以是符号串，一个短语可以产生另一个短语</li><li>0型语言：L0这种语言可以用<strong>图灵机</strong>(Turing)接受。</li></ul></li><li><p>1型文法</p><ul><li>$P:xUy ::= xuy$其中$U∈V_n,\quad x,y,u∈V^*$</li><li>称为上下文敏感或<strong>上下文有关文法</strong>。也即只有在x、y这样的 上下文中才能把U改写为u</li><li>1型语言：L1 这种语言可以由一种<strong>线性界限自动机</strong>接受</li></ul></li><li><p>2型文法</p><ul><li>$P:U::=u$其中$U∈V_n,\quad u∈V^*$</li><li>称为<strong>上下文无关文法</strong>。也即把U改写为u时，不必考虑上下文。 (1型文法的规则中x，y均为 $ε$ 时即为2型文法）</li><li>注意：2型文法与BNF表示相等价</li><li>2型语言：L2 这种语言可以由<strong>下推自动机</strong>接受</li></ul></li><li><p>3型文法</p><ul><li>左线性：$P:U ::= t$ 或$U::= Wt$其中$U,W∈V_n,\quad t∈V_t$</li><li>右线性：$P:U ::= t$ 或$U::= tW$其中$U,W∈V_n,\quad t∈V_t$</li><li>3型文法称为<strong>正则文法</strong>。它是对2型文法进行进一步限制</li><li>3型语言：L3 又称正则语言、正则集合这种语言可以由<strong>有穷自动机</strong>接受</li></ul></li><li><p>语言间的关系</p><p>  <img src="https://s3.uuu.ovh/imgs/2022/11/23/5423ec818c8b1cab.jpg" alt=""></p></li></ul><h1 id="三、词法分析"><a href="#三、词法分析" class="headerlink" title="三、词法分析"></a>三、词法分析</h1><h2 id="一-词法分析的功能"><a href="#一-词法分析的功能" class="headerlink" title="(一)词法分析的功能"></a>(一)词法分析的功能</h2><ul><li>词法分析：根据词法规则识别及组合单词，进行词法检查。 </li><li>删去空格字符和注释。 </li><li>对数字常数完成数字字符串到二进制数值的转换</li><li>词法分析程序的输出形式——-单词的内部形式<ul><li>几种常用的单词内部形式：</li><li>1、按单词种类分类</li><li>2、保留字和分界符采用一符一类</li><li>3、标识符和常数的单词值又为指示字（指针值）</li></ul></li></ul><h2 id="二-正则文法和状态图"><a href="#二-正则文法和状态图" class="headerlink" title="(二)正则文法和状态图"></a>(二)正则文法和状态图</h2><ul><li><p>状态图的画法（根据文法画出状态图）</p><ul><li><p>左线性文法的状态图的画法：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 正则文法</span><br><span class="line">Z --&gt; U0 | V1</span><br><span class="line">U --&gt; Z1 | 1</span><br><span class="line">V --&gt; Z0 | 0</span><br></pre></td></tr></table></figure></li><li><p>1、令G的每个非终结符都是一个状态</p></li><li><p>2、设一个开始状态S</p></li><li><p>3、若$Q::=T, Q ∈V_n,T ∈V_t$则：</p>  <pre class="mermaid">        graph LR      S((S))-->|T|Q((Q))</pre></li><li><p>4、若$Q::=RT,\quad Q,R∈V_n,T ∈V_t$则：</p>  <pre class="mermaid">        graph LR      R((R))-->|T|Q((Q))</pre></li><li><p>5、按自动机方法，可加上开始状态和终止状态标志</p></li></ul></li><li><p>识别算法</p><p>  利用状态图可按如下步骤分析和识别字符串x： </p><ul><li>1、置初始状态为当前状态，从x的最左字符开始， 重复步骤2，直到x右端为止。 </li><li>2、扫描x的下一个字符，在当前状态所射出的弧中 找出标记有该字符的弧，并沿此弧过渡到下一个状 态；如果找不到标有该字符的弧，那么x不是句子， 过程到此结束；如果扫描的是x的最右端字符，并 从当前状态出发沿着标有该字符的弧过渡到下一个 状态为终止状态Z，则x是句子。</li></ul></li></ul><h2 id="三-从“状态图”到“有穷状态自动机”"><a href="#三-从“状态图”到“有穷状态自动机”" class="headerlink" title="(三)从“状态图”到“有穷状态自动机”"></a>(三)从“状态图”到“有穷状态自动机”</h2><h3 id="1、确定的有穷自动机-DFA"><a href="#1、确定的有穷自动机-DFA" class="headerlink" title="1、确定的有穷自动机(DFA)"></a>1、确定的有穷自动机(DFA)</h3><ul><li><p>一个确定的有穷自动机(DFA)M是一个五元式：$M=(S, Σ，δ, s_0, Z)$</p><ul><li>$S$ —有穷状态集</li><li>$Σ$ —输入字母表 </li><li>$δ$ —映射函数(也称状态转换函数) $S×Σ→S\quad δ(s,a)=s’\quad s, s’ ∈S, a∈Σ$ </li><li>$s_0$ —初始状态 $s0 ∈S$ </li><li>$Z$—终止状态集 $Z\subseteq S$</li></ul></li><li><p>DFA  M所接受的符号串：令$α= a_1a_2…a_n，α∈Σ$，若$δ(δ(…δ(s_0, a_1),a_2)…),a_{n-1}),a_n) = S_n$ ,且$S_n ∈Z$，则可以写成$δ(s_0, α)= S_n$，我们称$α$可为 M所接受</p><p>  换言之：若存在一条 初始状态到某一终止状态的路径，且这条 路径上能有弧的标记 符号连接成符号串α，则称α为DFA M（接受）识别。</p><p>  DFA M所接受的语言为：$L(M)=\{α|δ(s_0, α)= S_n, S_n∈Z\}$</p></li></ul><h3 id="2、不确定的有穷自动机-NFA"><a href="#2、不确定的有穷自动机-NFA" class="headerlink" title="2、不确定的有穷自动机(NFA)"></a>2、不确定的有穷自动机(NFA)</h3><ul><li><p>若$δ$是一个多值函数，且输入可允许为$ε$，则有穷自动机是不确定的，即在某个状态下，对于某个输入字符存在多个后继状态</p></li><li><p>从同一状态出发，有以同一字符标记的多条边，或者有 以$ε$标记的特殊边的自动机</p></li><li><p>NFA的形式定义为：</p><p>  一个非确定的有穷自动机NFA M’是一个五元式：$NFA\quad M’=(S, Σ∪\{ε\}, δ, s_0, Z)$ </p><ul><li>$S$—有穷状态集 </li><li>$Σ∪\{ε\}$—输入符号加上$ε$, 即自动机的每个结点所射出的弧可以是$Σ$中的一个字符或是$ε$ </li><li>$s_0$—初态 $s0 ∈S$</li><li>$Z$—终态集 $Z\subseteq S$ </li><li>$δ$—转换函数 $S×Σ∪\{ε\} →2^S$  ($2^S$ —S的幂集：S的子集构成的集合）</li></ul></li><li><p>NFA M’所接受的语言为：$L(M’)=\{α|δ(s_0,α)=S’,S’∩Z≠\emptyset\}$</p></li></ul><h3 id="3、正则表达式基础"><a href="#3、正则表达式基础" class="headerlink" title="3、正则表达式基础"></a>3、正则表达式基础</h3><ul><li>正则表达式：另一种在$Σ^*$上识别语言的方法</li><li>有字母表$\Sigma$，定义在$\Sigma$上的正则表达式和正则集合递归定义如下<ul><li>1、$\varepsilon$和$\emptyset$都是$\Sigma$上的正则表达式，其正则集合分别为：$\{\varepsilon\}$和$\emptyset$;</li><li>2、任何$a \in \Sigma$ ，a是$\Sigma$上的正则表达式，其正则集合为：$\{a\}$</li><li>3、假定$U$和$V$是$\Sigma$上的正则表达式，其正则集合分别记为$L(U)$和$L(V)$，那么$U|V$，$U·V$和$U^<em>$也都是$\Sigma$上的正则表达式，其正则集合分别为$L(U) \cup L(V)$、 $L(U) · L(V)$和$L(U)^</em>$</li><li>4、任何$\Sigma$上的正则表达式和正则集合均由1、2和3产生</li></ul></li><li>正则表达式中的运算符： <ul><li>$|$——或（选择） </li><li>$·$ ——连接 </li><li>$*$或 $\{\}$——重复 </li><li>$()$——括号</li></ul></li><li>运算符的优先级： <ul><li>先* </li><li>后 • </li><li>最后 | </li><li>• 在正则表达式中可以省略</li></ul></li><li><p>正则表达式的性质： </p><ul><li>设e1, e2和e3均是某字母表上的正则表达式, 则有: <ul><li>单位正则表达式: $\varepsilon e = e\varepsilon = e$ </li><li>交换律: $e1 | e2 = e2 | e1 $</li><li>结合律: $e1|(e2|e3) = (e1|e2)|e3  e1(e2e3) = (e1e2)e3 $</li><li>分配律:<script type="math/tex">e1(e2|e3) = e1e2|e1e3  (e1|e2)e3 = e1e3|e2e3</script></li><li>此外:$ r^<em> = (r|\varepsilon)^</em>\quad r^{<em>*}=r^</em> (r|s)^<em> = (r^</em>s^<em>)^</em>$</li></ul></li></ul></li><li><p>正则表达式与3型文法等价</p></li></ul><h2 id="四-NFA的确定化"><a href="#四-NFA的确定化" class="headerlink" title="(四)NFA的确定化"></a>(四)NFA的确定化<span id = "NFA的确定化"></span></h2><ul><li><p>定义1：集合$I$的$ε-$闭包：</p><p>  令$I$是一个状态集的子集，定义$ε-closure(I)$为： </p><ul><li>1、若$s∈I$，则$s∈ε-closure(I)$； </li><li>2、若$s∈I$，则从$s$出发经过任意条$ε$弧能够到达的任何状态都属于$ε-closure(I)$。 状态集$ε-closure(I)$称为$I$的$ε-$闭包。</li></ul></li><li><p>定义 2：令I是NFA M’的状态集的一个子集, $a \in \Sigma$</p><ul><li>定义: $I_{\mathrm{a}}=\varepsilon$-closure $(J)$</li><li>其中 $J=\bigcup_{\mathrm{s} \in \mathrm{I}} \delta(\mathrm{s}, \mathrm{a})$</li><li>$J$是从状态子集$I$中的每个状态出发，经过标记为$a$的弧而 达到的状态集合</li><li>$I_a$是状态子集，其元素为$J$中的状态,加上从$J$中每一个状态出发通过$ε$弧到达的状态</li></ul></li><li><p>确定化方法</p><ul><li><p>先求出初始状态$s_0$的$\varepsilon-$闭包</p><p>  这个状态集是第一个新状态（也就是转化后DFA的状态）。从这个状态集开始进行识别符号、状态转移的工作，状态转移产生的新状态都是确定化的DFA的状态。</p></li><li><p>对新产生的状态集进行状态转换的分析</p><p>  识别一个符号集中的符号，按照上述第2个定义，求出所达到的状态集（DFA的状态）。若该状态集没有出现过，则添加到待分析的列表中。</p><p>  可以先算出NFA每个状态的$\varepsilon-$闭包，所达到的状态集就是识别某个符号后到达的所有状态的$\varepsilon-$闭包的并集。</p></li><li><p>若还有新产生的状态集没有分析，则重复上一步</p></li></ul></li><li><p>形式化表述</p><p>  见<a href="">形式语言与自动机理论</a></p></li></ul><h2 id="五-DFA的极小化"><a href="#五-DFA的极小化" class="headerlink" title="(五)DFA的极小化"></a>(五)<span id = "DFA的极小化"><strong>DFA的极小化</strong></span></h2><ul><li>对于任一个DFA，存在一个唯一的状态最少的等价的DFA</li><li><p>一个有穷自动机是化简的$\Longleftrightarrow$它没有多余状态并且它的状态中没有两个是互相等价的。</p></li><li><p>一个有穷自动机可以通过消除多余状态和合并等价状态 而转换成一个最小的与之等价的有穷自动机</p></li><li><p>定义：</p><ul><li>有穷自动机的多余状态：从该自动机的开始状态出发，任何输入串也不能到达那个状态</li><li>等价状态：状态s和t的等价条件是<ul><li>一致性条件：状态s和t必须同时为可接受状态或不接受状态</li><li>蔓延性条件：对于所有输入符号，状态s和t必须转换到等价的状态里</li><li>对于所有输入符号$c$，$Ic(s)=Ic(t)$，即状态$s、t$对于$c$具有相同 的后继，则称$s，t$是等价的。（任何有后继的状态和任何无后继的状态一定不等价）</li><li>有穷自动机的状态s和t不等价,称这两个状态是可区别的</li></ul></li></ul></li><li><p>极小化算法</p><p>  输入：给定的DFA<br>  输出：可区分状态表</p><p>  算法：</p><p>  <img src="https://s3.uuu.ovh/imgs/2022/12/01/72eac705deb2c875.jpg" alt="DFA极小化算法"></p></li><li><p>示意图</p><p>  <img src="https://s3.uuu.ovh/imgs/2022/12/01/1afbc32a15dbc23f.jpg" alt=""></p></li></ul><h2 id="六-词法分析的自动化"><a href="#六-词法分析的自动化" class="headerlink" title="(六)词法分析的自动化"></a>(六)词法分析的自动化</h2><ul><li>词法分析程序的自动生成器—LEX（LEXICAL）</li><li>原理：给定RE → NFA → DFA → 极小化，从而自动生成词法分析程序</li><li>… …</li></ul><h2 id="七-词法分析程序-getSymbol"><a href="#七-词法分析程序-getSymbol" class="headerlink" title="(七)词法分析程序 getSymbol()"></a>(七)词法分析程序 getSymbol()</h2><pre class="mermaid">graph LR    A["词法规则"] --> B["状态图"] --> C["词法分析程序"]</pre><ul><li>不是理论的重点，不做详细介绍</li></ul><h1 id="四、语法分析"><a href="#四、语法分析" class="headerlink" title="四、语法分析"></a>四、语法分析</h1><h2 id="一-语法分析"><a href="#一-语法分析" class="headerlink" title="(一)语法分析"></a>(一)语法分析</h2><ul><li>根据语法规则（即语言的文法），分析并识别出 各种语法成分，如表达式、各种说明、各种语句、 过程、函数等，并进行语法正确性检查</li><li>自顶向下（Top-Down）分析：推导（Derivations）</li><li>自底向上（Bottom-Up）分析：规约（Reductions）</li></ul><h2 id="二-自顶向下分析"><a href="#二-自顶向下分析" class="headerlink" title="(二)自顶向下分析"></a>(二)自顶向下分析</h2><h3 id="1、自顶向下分析的一般过程"><a href="#1、自顶向下分析的一般过程" class="headerlink" title="1、自顶向下分析的一般过程"></a>1、自顶向下分析的一般过程</h3><ul><li>给定符号串S，若预测是某一语法成分，则可根据该语法成分的文法，设法为S构造一棵语法树， 若成功,则S最终被识别为某一语法成分，即 $S∈L(G[Z])$，其中G[Z]为某语法成分的文法 若不成功, 则 $S∈L(G[Z]) $</li><li>自顶向下分析方法特点：<ul><li>分析过程是带预测的，对输入符号串要预测属于什么 语法成分，然后根据该语法成分的文法建立语法树</li><li>分析过程是一种试探过程，是尽一切办法(选用不同 规则) 来建立语法树的过程, 由于是试探过程, 难免 有失败, 所以分析过程需进行回溯, 因此也称这种方法 是带回溯的自顶向下分析方法</li><li>最左推导可以编写程序来实现, 但带溯的自顶向下分 析方法在实际上价值不大, 效率低</li></ul></li></ul><h3 id="2、自顶向下分析存在的问题及解决方法"><a href="#2、自顶向下分析存在的问题及解决方法" class="headerlink" title="2、自顶向下分析存在的问题及解决方法"></a>2、自顶向下分析存在的问题及解决方法</h3><h4 id="1-左递归文法"><a href="#1-左递归文法" class="headerlink" title="(1) 左递归文法"></a>(1) 左递归文法</h4><ul><li>有如下文法： 令$U$是文法的任一非终结符，文法中有规则$ U∷=U…$或者$U^+ := U…$这个文法是<strong>左递归</strong>的</li><li>自顶向下分析的基本缺点是： 不能处理具有左递归性的文法<ul><li>如果在匹配输入串的过程中，假定正好轮到要用非终结 符U直接匹配输入串，即要用U的右部符号串U¨¨去匹配， 为了用U¨¨去匹配，又得用U去匹配，这样无限的循环下 去将无法终止。</li></ul></li><li>要实行自顶向下分析，必须要消除文法的左递归</li></ul><h5 id="消除左递归的方法"><a href="#消除左递归的方法" class="headerlink" title="消除左递归的方法"></a><span id = "消除左递归的方法"><strong>消除左递归的方法</strong></span></h5><ul><li><p>方法一，使用扩充的BNF表示来改写文法</p><ul><li><p>规则一（提因子）</p><ul><li>若: $U::=xy|x w|x z$<br>  则可改写为： $U::=x(y|w|…|z)$<br>  若： $y=y_1 y_2, w=y_1 w_2$<br>  则 $U::=x(y_1(y_2|w_2)|…|z)$</li></ul><hr><ul><li><p>若有规则：$U∷=x|xy $</p><p>  则可以改写为：$U∷=x(y|ε)$ </p><p>  注意：不应写成$U∷=x(ε|y)$</p></li><li><p>使用提因子法，不仅有助于消除直接左递归，而且有 助于压缩文件的长度，使我们能更有效地分析句子</p></li></ul></li><li><p>规则二</p><ul><li><p>若有文法规则：$U∷=x|y|……|z|Uv$</p><p>  可以改写为$U∷=(x|y|……|z)\{v\}$</p></li><li><p>其特点是：具有一个直接左递归的右部并位于最后， 这表明该语法类U是由x或y……或z其后随有零个或多个v组成</p></li></ul></li><li><p>通过以上两条规则，就能消除文法的直接左递归， 并保持文法的等价性</p></li></ul></li><li><p>方法二，将左递归规则改为右递归规则</p><ul><li><p>规则三</p><ul><li><p>若$P∷=P\alpha|\beta$</p><p>  则可改写为</p><p>  $P ∷= \beta P’$</p><p>  $P’ ∷= \alpha P’| ε$</p></li></ul></li></ul></li><li><p>消除所有左递归的算法</p><p>  <img src="https://s3.uuu.ovh/imgs/2022/12/01/a07b61a93c2ed32c.jpg" alt=""></p></li></ul><h4 id="2-回溯问题"><a href="#2-回溯问题" class="headerlink" title="(2)回溯问题"></a>(2)回溯问题</h4><ul><li>造成回溯的条件：文法中，对于某个非终结符号的规则其右部 有多个选择，并根据所面临的输入符号不能准确 地确定所要的选择时，就可能出现回溯</li><li>定义$\operatorname{FIRST}\left(\alpha_i\right)=\left\{a \mid \alpha_i \stackrel{*}{\Rightarrow} a \ldots, a \in V_t\right\}$</li><li>为避免回溯, 对文法的要求是:<br>  $\operatorname{FIRST}\left(\alpha_i\right) \cap \operatorname{FIRST}\left(\alpha_j\right)=\varphi(i \neq j)$</li></ul><hr><h5 id="消除回溯的途径"><a href="#消除回溯的途径" class="headerlink" title="消除回溯的途径"></a><span id = "消除回溯的途径"><strong>消除回溯的途径</strong></span></h5><ul><li><p>1、改写文法：对具有多个右部的规则反复提取左因子</p><ul><li><p>$U∷=xV|xW\quad U, V, W∈V_n, x∈V_t^+ $</p><p>  改写为$U∷=x(V|W)$</p><p>  $U∷=xZ\quad Z∷=V|W$</p><p><strong>注意：</strong>问题到此并没有结束，还需要 进一步检查V和W的首符号是否相交</p></li></ul></li><li><p>2、超前扫描（偷看）</p><ul><li>当文法不满足避免回溯的条件时，即各选择的首符号相 交时，可以采用超前扫描的方法，即向前侦察各输入符 号串的第二个、第三个符号来确定要选择的目标</li></ul></li></ul><hr><ul><li><p>为了在不采取超前扫描的前提下实现不带回溯的自顶向 下分析，文法需要满足两个条件：</p><ul><li>文法是非左递归的</li><li><p>对文法的任一非终结符，若其规则右部有多个选择时， 各选择所推出的终结符号串的首符号集合要两两不相交</p></li><li><p>定义</p><p>  $\operatorname{FOLLOW}(\mathbf{A})=\left\{\mathbf{a} \mid \mathbf{Z} \stackrel{<em>}{\Rightarrow} \ldots \ldots \mathbf{A a} \ldots, \quad \mathbf{a} \in \mathbf{V}_t\right\}$<br>  $\mathbf{A} \in \mathbf{V}_{\mathbf{n}}, \mathbf{Z}$ 识别符号<br>  该集合称为 $\mathrm{A}$ 的后继符号集合。<br>  特殊地: 若 $Z \stackrel{</em>}{\Rightarrow} \ldots A$ 则 # $\in FOLLOW(A)$</p></li><li><p><span id = "不带回溯的充分必要条件"><strong>不带回溯的充分必要条件</strong></span>是：对于G的 每一个非终结符A的任意两条规则$A::=α|β$,下列条件成立：</p><ul><li>$FIRST(α) ∩ FIRST(β) = \empty$</li><li>$若β\overset{*}{\Longrightarrow}ε, 则FIRST(α) ∩ FOLLOW(A) = \empty$</li></ul></li></ul></li></ul><h3 id="3、递归子程序法（递归下降分析法）"><a href="#3、递归子程序法（递归下降分析法）" class="headerlink" title="3、递归子程序法（递归下降分析法）"></a>3、递归子程序法（递归下降分析法）</h3><ul><li>具体做法：对语法的每一个非终结符都编一个分析程序， 当根据文法和当时的输入符号预测到要用某个非终结符 去匹配输入串时，就调用该非终结符的分析程序</li><li>不是理论重点，不做详细介绍</li></ul><p>TODO</p><h2 id="三-自底向上分析"><a href="#三-自底向上分析" class="headerlink" title="(三)自底向上分析"></a>(三)自底向上分析</h2><h3 id="1、LR分析方法"><a href="#1、LR分析方法" class="headerlink" title="1、LR分析方法"></a>1、LR分析方法</h3><h4 id="1-LR-0-分析法"><a href="#1-LR-0-分析法" class="headerlink" title="(1)LR(0)分析法"></a>(1)LR(0)分析法</h4><h4 id="2-LR-0-的局限性"><a href="#2-LR-0-的局限性" class="headerlink" title="(2)LR(0)的局限性"></a>(2)LR(0)的局限性</h4><ul><li><p>LR(0)在分析时会产生如下冲突：</p><ul><li><p>Shift-Reduce冲突：应该移进还是规约？</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E --&gt; T·</span><br><span class="line">E --&gt; T·+E</span><br></pre></td></tr></table></figure></li><li><p>Reduce-Reduce冲突：应该按照那个规则规约？</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A --&gt; abC·</span><br><span class="line">B --&gt; abC·</span><br></pre></td></tr></table></figure></li></ul></li><li><p>LR(0)能够处理的情况有限：句柄必须在左侧栈顶，没有使用右侧上下文（right context）</p><ul><li>有些冲突不是真冲突，可以通过向后预读解决</li></ul></li></ul><h4 id="3-LR-1-分析法"><a href="#3-LR-1-分析法" class="headerlink" title="(3)LR(1)分析法"></a>(3)LR(1)分析法</h4><ul><li>LR(1)的基本思想<ul><li>通过“偷看”一个右侧符号，在遇到冲突时辅助决定</li><li>思路：将状态区分的更加细致，构造LR(1)的状态机</li></ul></li><li>优势：<strong>功能强大</strong>！任何LR(0)、LL(1)、确定型CFL、 LL(k)、LR(k)都有LR(1)的等价文法</li><li>主要问题：<strong>状态爆炸！实用性差！</strong></li></ul><h4 id="4-SLR（1）：简单LR分析法"><a href="#4-SLR（1）：简单LR分析法" class="headerlink" title="(4)SLR（1）：简单LR分析法"></a>(4)SLR（1）：简单LR分析法</h4><h5 id="①SLR的基本思想"><a href="#①SLR的基本思想" class="headerlink" title="①SLR的基本思想"></a>①SLR的基本思想</h5><ul><li>兼有LR(0)和LR(1)的优点，放弃一些精度</li><li>在LR(0)的基础上，只针对冲突进行处理</li><li>当发生S-R冲突（Shift-Reduce冲突）时，根据 FOLLOW集合确定S还是R</li></ul><h5 id="②构造SLR分析表"><a href="#②构造SLR分析表" class="headerlink" title="②构造SLR分析表"></a>②构造SLR分析表</h5><ul><li><p>1、先构造LR(0)的自动机，GOTO表</p></li><li><p>2、SLR求ACTION表</p><ul><li>1、求出文法每个非终结符的FOLLOW集合</li><li>2、若项目$A→α.aβ ∈k$，且$a ∈Vt$，则置$ACTION[k,a] = s$(移进）</li><li>3、若项目$A→ α.∈k$, 那么对输入符号$a$，若$a∈FOLLOW(A)$，则置$ACTION[k,a]=r_j$其中$A→ α$为文法<script type="math/tex">G’</script>的第$j$个产生式。</li><li>4、若项目$E’→E.∈k$, 则置$ACTION[ k , <end> ] = accept$</li><li>5、空白格，均置$error$</li><li>总结：在状态中可有三种类型的项目，其中只有两种有移进或归约动作: <ul><li>$A→ α.aβ a∈Vt$移进项目——分析动作：移进 </li><li>$A→ α.$归约项目——分析动作：归约 </li><li>$A→ α.Bβ B∈Vn$——待约项目：无动作</li></ul></li><li>根据上述算法,可以构造出文法$G’[E’]$的ACTION</li></ul></li><li><p>3、合并ACTION和GOTO表形成分析表</p></li><li><p>样例</p></li></ul><p>TODO</p><h1 id="五、符号表管理技术"><a href="#五、符号表管理技术" class="headerlink" title="五、符号表管理技术"></a>五、符号表管理技术</h1><h2 id="一-概述"><a href="#一-概述" class="headerlink" title="(一)概述"></a>(一)概述</h2><ul><li><p>在编译过程中,编译程序用来记录源程序中各种 名字的特性信息, 所以也称为名字特性表</p><ul><li>名字：程序名、过程名、函数名、用户定义类型名、 变量名、常量名、枚举值名、标号名等。</li><li>特性信息: 上述名字的种类、类型、维数、参数个数、 数值及目标地址（存储单元地址）等。</li></ul></li><li><p>建表和查表的必要性</p><p>  当编译程序编译到引用所声明的变量时(赋值或引用其 值)，要进行语法语义正确性检查(类型是否符合要求)和生成相应的目标程序，这就需要查符号表以取得相关信息</p></li><li><p>有关符号表的操作：填表和查表</p><p>  填表：当分析到程序中的说明或定义语句时，将说明或 定义的名字，以及与之有关的信息填入符号表中。</p><p>  查表：(1) 填表前查表，检查在程序的同一作用域内名字 是否重复定义； (2) 检查名字的种类是否与说明一致； (3) 对于强类型语言，要检查表达式中各变量的类型 是否一致； (4) 生成目标指令时，要取得所需要的地址。</p></li></ul><h3 id="二-符号表的组织与内容"><a href="#二-符号表的组织与内容" class="headerlink" title="(二)符号表的组织与内容"></a>(二)符号表的组织与内容</h3><h3 id="1、符号表的结构与内容"><a href="#1、符号表的结构与内容" class="headerlink" title="1、符号表的结构与内容"></a>1、符号表的结构与内容</h3><ul><li><p>符号表的基本结构</p><p>  名字：存放名字，一般为标识符的符号串,也可 为指向标识符字符串的指针</p><p>  特性(信息)：可包括多个子域 , 分别表示标识符的有 关信息，如:</p><ul><li>名字(标识符)的种类:简单变量、函数、过程、 数组、标号、参数等 </li><li>类型：如整型、浮点型、字符型、指针等 </li><li>性质：变量形参、值形参等 </li><li>值： 常量名所代表的数值 </li><li>地址：变量所分配单元的首址或地址位移 </li><li>大小：所占的字节数 </li><li>作用域的嵌套层次:<ul><li>对于数组: 维数、上下界值、计算下标变量地址所用的 信息（数组信息向量）以及数组元素类型等。</li><li>对于记录（结构、联合）：域的个数，每个域的域名、 地址位移、类型等。 </li><li>对于过程或函数：形参个数、所在层次、函数返回值类型、 局部变量所占空间大小等。 </li><li>对于指针：所指对象类型等。</li></ul></li></ul></li></ul><h3 id="2、符号表的组织方式"><a href="#2、符号表的组织方式" class="headerlink" title="2、符号表的组织方式"></a>2、符号表的组织方式</h3><ul><li>1、统一符号表:不论什么名字都填入统一格式的符号表中<ul><li>符号表表项应按信息量最大的名字设计,填表、 查表比较方便, 结构简单, 但是浪费大量空间。</li></ul></li><li>2、对于不同种类的名字分别建立各种符号表<ul><li>节省空间, 但是填表和查表不方便。</li></ul></li><li>3、折中办法:大部分共同信息组成统一格式的符号表， 特殊信息另设附表,两者用指针连接</li></ul><h3 id="3、非分程序结构语言的符号表组织"><a href="#3、非分程序结构语言的符号表组织" class="headerlink" title="3、非分程序结构语言的符号表组织"></a>3、非分程序结构语言的符号表组织</h3><h4 id="1-非分程序结构语言"><a href="#1-非分程序结构语言" class="headerlink" title="(1)非分程序结构语言"></a>(1)非分程序结构语言</h4><ul><li><p>每个可独立进行编译的程序单元是一个不包含有子模块的单一模块，如FORTRAN语言、C语言</p></li><li><p>可以简单理解为函数内部不允许再定义函数</p></li></ul><h4 id="2-标识符的作用域及基本处理办法"><a href="#2-标识符的作用域及基本处理办法" class="headerlink" title="(2)标识符的作用域及基本处理办法"></a>(2)标识符的作用域及基本处理办法</h4><ul><li>作用域: <ul><li>全局:子程序名,函数名和公共区名</li><li>局部: 程序单元中定义的变量</li></ul></li><li>符号表的组织<ul><li>全局符号表</li><li>局部符号表</li></ul></li><li>基本处理办法<ol><li>子程序、函数名和公共区名填入全局符号表</li><li>在子程序（函数）声明部分读到标识符，造局部符号表<ul><li>查本程序单元局部符 号表，有无同名？<ul><li>有,重复声明,报错</li><li>无,造表</li></ul></li></ul></li><li>在语句部分读到标识符，查表<ul><li>查本程序单元局部符 号表，有无同名？<ul><li>有,即已声明</li><li>无,查全局变量表<ul><li>有,全局量</li><li>无, 无定义标识符</li></ul></li></ul></li></ul></li><li>程序单元结束：释放该程序单元的局部符号表</li><li>程序编译完成：释放全部符号表</li></ol></li></ul><h4 id="3-符号表的组织方式"><a href="#3-符号表的组织方式" class="headerlink" title="(3)符号表的组织方式"></a>(3)符号表的组织方式</h4><ol><li>无序符号表: 按扫描顺序建表,查表要逐项查找<ul><li>查表操作的平均长度为$n+1/2$</li></ul></li><li>有序符号表：符号表按变量名进行字典式排序<ul><li>线性查表: $n+1 / 2$ </li><li>折半查表: $\log_2n -1$</li></ul></li><li>散列符号表(Hash表)：符号表地址 = Hash(标识符)</li></ol><h1 id="重要知识点索引"><a href="#重要知识点索引" class="headerlink" title="重要知识点索引"></a>重要知识点索引</h1><ul><li><a href="#乔姆斯基文法体系">乔姆斯基文法体系</a></li><li><a href="#短语的查找方案">短语的查找</a></li><li><a href="#NFA的确定化">NFA的确定化</a></li><li><a href="#DFA的极小化">DFA的极小化</a></li><li><a href="#消除左递归的方法">消除左递归的方法</a></li><li><a href="#消除回溯的途径">消除回溯的途径</a></li><li><a href="">不带回溯的充分必要条件</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django后端开发</title>
      <link href="/2022/11/15/Django%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
      <url>/2022/11/15/Django%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="〇、关于"><a href="#〇、关于" class="headerlink" title="〇、关于"></a>〇、关于</h1><ul><li><p>文章基于数据库大作业HuYoCommunity项目编写</p><ul><li>项目连接：TODO</li></ul></li><li><p>项目基于django + vue前后端分离架构编写</p></li><li>项目基于apifox进行接口的定义与测试</li><li>项目数据库选用mysql</li><li>关于版本<ul><li>python3.10</li><li>django4.1.2</li><li>mysql5.7.39</li><li>mysqlclient2.1.1</li></ul></li></ul><h1 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h1><ul><li><p>直接在pycharm上点击创建即可</p></li><li><p>文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite</span><br><span class="line">├── manage.py          【项目的管理，启动项目、创建app、数据管理】【不要动】【***常用***】</span><br><span class="line">└── mysite</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py    【项目配置】【***常常修改***】</span><br><span class="line">    ├── urls.py        【URL和函数的对应关系】【***常常修改***】</span><br><span class="line">    ├── asgi.py        【接收网络请求】【不要动】</span><br><span class="line">    └── wsgi.py        【接收网络请求】【不要动】</span><br></pre></td></tr></table></figure></li></ul><h1 id="二、创建APP"><a href="#二、创建APP" class="headerlink" title="二、创建APP"></a>二、创建APP</h1><ul><li><p>```</p><h1 id="在终端输入"><a href="#在终端输入" class="headerlink" title="在终端输入"></a>在终端输入</h1><p>python .\manage.py startapp <app name></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 文件目录</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>├── <app name><br>│   ├── <strong>init</strong>.py<br>│   ├── admin.py         【固定，不用动】django默认提供了admin后台管理。<br>│   ├── apps.py          【固定，不用动】app启动类<br>│   ├── migrations       【固定，不用动】数据库变更记录<br>│   │   └── <strong>init</strong>.py<br>│   ├── models.py        【<strong>重要</strong>】，对数据库操作。<br>│   ├── tests.py         【固定，不用动】单元测试<br>│   └── views.py         【<strong>重要</strong>】，函数。<br>├── manage.py<br>└── mysite</p><pre><code>├── __init__.py├── asgi.py├── settings.py├── urls.py          【URL-&gt;函数】└── wsgi.py</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 三、一般开发流程</span><br><span class="line"></span><br><span class="line">- 1、注册app【settings.py】</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  INSTALLED_APPS = [</span><br><span class="line">      &#x27;django.contrib.admin&#x27;,</span><br><span class="line">      &#x27;django.contrib.auth&#x27;,</span><br><span class="line">      &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">      &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">      &#x27;django.contrib.messages&#x27;,</span><br><span class="line">      &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">      &#x27;&lt;your app name&gt;.apps.&lt;your app name&gt;Config&#x27;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li><li><p>编写URL和视图函数对应关系 【urls.py】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>编写视图函数 【views.py】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>启动django项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver </span><br></pre></td></tr></table></figure><p>或直接点击pycharm的运行按钮</p></li></ul><h1 id="四、静态文件"><a href="#四、静态文件" class="headerlink" title="四、静态文件"></a>四、静态文件</h1><ul><li><p>在app目录下创建static文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├── &lt;app name&gt;</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py         【固定，不用动】django默认提供了admin后台管理。</span><br><span class="line">│   ├── apps.py          【固定，不用动】app启动类</span><br><span class="line">│   ├── migrations       【固定，不用动】数据库变更记录</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">|   ├── static           【保存静态文件】</span><br><span class="line">│   ├── models.py        【**重要**】，对数据库操作。</span><br><span class="line">│   ├── tests.py         【固定，不用动】单元测试</span><br><span class="line">│   └── views.py         【**重要**】，函数。</span><br><span class="line">├── manage.py</span><br><span class="line">└── mysite</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── asgi.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py          【URL-&gt;函数】</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure></li></ul><h1 id="五、数据库操作"><a href="#五、数据库操作" class="headerlink" title="五、数据库操作"></a>五、数据库操作</h1><ul><li><p>1、MySQL数据库 + pymysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 1.连接MySQL</span><br><span class="line">conn = pymysql.connect(host=&quot;127.0.0.1&quot;, port=3306, user=&#x27;root&#x27;, passwd=&quot;123456&quot;, charset=&#x27;utf8&#x27;, db=&#x27;unicom&#x27;)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"># 2.发送指令</span><br><span class="line">cursor.execute(&quot;insert into admin(username,password,mobile) values(&#x27;张三&#x27;,&#x27;123456&#x27;,&#x27;18512345678&#x27;)&quot;)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"># 3.关闭</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></li><li><p>2、Django开发操作数据库更简单，内部提供了ORM框架</p><p><img src="https://s3.bmp.ovh/imgs/2022/11/15/08bf99ad28e7a18d.png" alt=""></p></li></ul><h2 id="一-安装第三方模块"><a href="#一-安装第三方模块" class="headerlink" title="(一)安装第三方模块"></a>(一)安装第三方模块</h2><ul><li><p>安装ORM依赖的mysql库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure></li></ul><h2 id="二-ORM"><a href="#二-ORM" class="headerlink" title="(二)ORM"></a>(二)ORM</h2><ul><li>ORM可以帮助我们做两件事：<ul><li>创建、修改、删除数据库中的表（不用你写SQL语句）。 【无法创建数据库】</li><li>操作表中的数据（不用写SQL语句）。</li></ul></li></ul><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><ul><li><p>启动MySQL服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\&lt;usr&gt;\Desktop&gt; mysql -uroot -p</span><br><span class="line">Enter password: ********</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 7</span><br><span class="line">Server version: 5.7.39 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database &lt;name&gt; DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、django连接数据库"><a href="#2、django连接数据库" class="headerlink" title="2、django连接数据库"></a>2、django连接数据库</h3><ul><li><p>在settings.py文件中进行配置和修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;&lt;database name&gt;&#x27;</span>,  <span class="comment"># 数据库名字</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># 那台机器安装了MySQL</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、django操作数据库"><a href="#3、django操作数据库" class="headerlink" title="3、django操作数据库"></a>3、django操作数据库</h3><h4 id="1-创建表"><a href="#1-创建表" class="headerlink" title="(1)创建表"></a>(1)创建表</h4><ul><li><p>在models.py文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UsrInfo</span>(models.Model):</span><br><span class="line">    usrname = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    passwd = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 还有外键等奇奇怪怪的类，自行探索</span></span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>注意：app需要提前注册</p></li><li><p>在表中新增列时，由于已存在列中可能已有数据，所以新增列必须要指定新增列对应的数据：</p><ul><li><p>1、手动输入一个值。</p></li><li><p>2、设置默认值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = models.IntegerField(default=2)</span><br></pre></td></tr></table></figure></li><li><p>3、允许为空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = models.IntegerField(null=True, blank=True)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以后在开发中如果想要对表结构进行调整：</p><ul><li><p>在models.py文件中操作类</p></li><li><p>执行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-操作表"><a href="#2-操作表" class="headerlink" title="(2)操作表"></a>(2)操作表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 1.新建 ####</span></span><br><span class="line">Department.objects.create(title=<span class="string">&quot;销售部&quot;</span>)</span><br><span class="line">Department.objects.create(title=<span class="string">&quot;IT部&quot;</span>)</span><br><span class="line">Department.objects.create(title=<span class="string">&quot;运营部&quot;</span>)</span><br><span class="line">UserInfo.objects.create(name=<span class="string">&quot;张三&quot;</span>, password=<span class="string">&quot;123&quot;</span>, age=<span class="number">19</span>)</span><br><span class="line">UserInfo.objects.create(name=<span class="string">&quot;李四&quot;</span>, password=<span class="string">&quot;456&quot;</span>, age=<span class="number">29</span>)</span><br><span class="line">UserInfo.objects.create(name=<span class="string">&quot;王五&quot;</span>, password=<span class="string">&quot;789&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 2.删除 ####</span></span><br><span class="line">UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">3</span>).delete()</span><br><span class="line">Department.objects.<span class="built_in">all</span>().delete()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 3.获取数据 ####</span></span><br><span class="line"><span class="comment"># 3.1 获取符合条件的所有数据</span></span><br><span class="line"><span class="comment"># data_list = [对象,对象,对象]  QuerySet类型</span></span><br><span class="line">data_list = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> data_list:</span><br><span class="line">    <span class="built_in">print</span>(obj.<span class="built_in">id</span>, obj.name, obj.password, obj.age)</span><br><span class="line"></span><br><span class="line">data_list = UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br><span class="line"><span class="comment"># 3.2 获取第一条数据【对象】</span></span><br><span class="line">row_obj = UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).first()</span><br><span class="line"><span class="built_in">print</span>(row_obj.<span class="built_in">id</span>, row_obj.name, row_obj.password, row_obj.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 4.更新数据 ####</span></span><br><span class="line">UserInfo.objects.<span class="built_in">all</span>().update(password=<span class="number">999</span>)</span><br><span class="line">UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">2</span>).update(age=<span class="number">999</span>)</span><br><span class="line">UserInfo.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;张三&quot;</span>).update(age=<span class="number">999</span>)</span><br></pre></td></tr></table></figure><h4 id="3-删除表"><a href="#3-删除表" class="headerlink" title="(3)删除表"></a>(3)删除表</h4><ul><li><p>1、找到models.py文件，直接删除想要删除的数据表的生成代码</p></li><li><p>2、然后将所有调用到该数据表的地方注释或删除，重新运行命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ul><h1 id="六、用户登录"><a href="#六、用户登录" class="headerlink" title="六、用户登录"></a>六、用户登录</h1><h2 id="一-cookie和session"><a href="#一-cookie和session" class="headerlink" title="(一)cookie和session"></a>(一)cookie和session</h2><h3 id="1、cookie"><a href="#1、cookie" class="headerlink" title="1、cookie"></a>1、cookie</h3><ul><li>Cookie意为“甜饼”，是<strong>由W3C组织提出</strong>，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。</li><li>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就<strong>给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong>。</li><li>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</li></ul><h3 id="2、session"><a href="#2、session" class="headerlink" title="2、session"></a>2、session</h3><ul><li>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</li><li>如果说<strong>Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</strong></li></ul><h3 id="3、工作原理示意"><a href="#3、工作原理示意" class="headerlink" title="3、工作原理示意"></a>3、工作原理示意</h3><p><img src="https://s3.bmp.ovh/imgs/2022/11/15/f7c64e6f56ddcbcc.png" alt=""></p><h2 id="二-用户登录"><a href="#二-用户登录" class="headerlink" title="(二)用户登录"></a>(二)用户登录</h2><ul><li><p>返回session_id也就是前端的cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 必须使用post请求</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        usrname = request.POST.get(<span class="string">&#x27;usrname&#x27;</span>)</span><br><span class="line">        passwd = request.POST.get(<span class="string">&#x27;passwd&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去数据库校验用户名和密码是否正确，获取用户对象、None</span></span><br><span class="line">        usr = models.Usr.objects.<span class="built_in">filter</span>(usrname=usrname, passwd=passwd).first()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> usr:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;valid&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment"># 用户名和密码正确</span></span><br><span class="line">        <span class="comment"># 生成session</span></span><br><span class="line">        <span class="comment"># 当执行下面一行代码时,django会自动在django_session表中创建对应的表项</span></span><br><span class="line">        request.session[<span class="string">&quot;info&quot;</span>] = &#123;<span class="string">&#x27;id&#x27;</span>: usr.<span class="built_in">id</span>, <span class="string">&#x27;name&#x27;</span>: usr.passwd&#125;</span><br><span class="line">        <span class="comment"># session可以保存1天</span></span><br><span class="line">        request.session.set_expiry(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 返回session_id作为cookie</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;valid&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;token&#x27;</span>: request.session.session_key&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;valid&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/11/17/7a485e245337da0d.jpg" alt=""></p></li></ul><h2 id="三-登录校验"><a href="#三-登录校验" class="headerlink" title="(三)登录校验"></a>(三)登录校验</h2><ul><li><p>在其他需要登录才能访问的页面中，都需要加入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 这里事实上是django帮我们进行了一次数据库查询，从django_session中查询登录信息</span></span><br><span class="line">    info = request.session.get(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> info:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>也可以使用中间件实现，见<a href="#中间件">中间件</a></p></li></ul><h2 id="四-注销"><a href="#四-注销" class="headerlink" title="(四)注销"></a>(四)注销</h2><ul><li><p>事实上消除session即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注销 &quot;&quot;&quot;</span></span><br><span class="line">    request.session.clear()</span><br><span class="line">    <span class="keyword">return</span> ...</span><br></pre></td></tr></table></figure></li></ul><h1 id="七、django图片存储"><a href="#七、django图片存储" class="headerlink" title="七、django图片存储"></a>七、django图片存储</h1><ul><li><p>1、设置settings.py，在底部添加以下两行。MEDIA_ROOT是项目中保存上传的文件的根目录，MEDIA_URL是要访问存放文件目录时使用的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>2、设置根urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static <span class="comment"># 添加本行</span></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings <span class="comment"># 添加本行</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    ...</span><br><span class="line">] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)  <span class="comment"># 将文件路径添加进来</span></span><br></pre></td></tr></table></figure></li><li><p>3、models</p><p>在django的模型中支持ImageField的存储。一定要记得设置upload_to，这里表示图片将被存放在根目录下的哪一个文件夹中，若没有该文件夹则会自动创建。例如，现在代码中设置的图片存储路径是img/avatar</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Usr</span>(models.Model):</span><br><span class="line">    usrname = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    passwd = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    avatar = models.ImageField(<span class="string">&#x27;头像&#x27;</span>, upload_to=<span class="string">&quot;avatar&quot;</span>, null=<span class="literal">True</span>) <span class="comment"># 使用ImageField upload_to必不可少</span></span><br></pre></td></tr></table></figure></li><li><p>4、通过url访问服务器图片文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;服务器地址&gt;/media/&lt;图片在服务器中地址&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="八、中间件"><a href="#八、中间件" class="headerlink" title="八、中间件"></a>八、<span id = "中间件">中间件</span></h1><p><img src="https://s3.uuu.ovh/imgs/2022/11/29/523164700891d9f1.png" alt=""></p><h2 id="一-Django-中间件作用"><a href="#一-Django-中间件作用" class="headerlink" title="(一)Django 中间件作用"></a>(一)Django 中间件作用</h2><ul><li>修改请求，即传送到 view 中的 HttpRequest 对象。</li><li>修改响应，即 view 返回的 HttpResponse 对象。</li></ul><h2 id="二-定义中间件"><a href="#二-定义中间件" class="headerlink" title="(二)定义中间件"></a>(二)定义中间件</h2><ul><li><p>中间件可以定义四个方法，分别是：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process_request(self,request)</span><br><span class="line">process_view(self, request, view_func, view_args, view_kwargs)</span><br><span class="line">process_exception(self, request, exception)</span><br><span class="line">process_response(self, request, response)</span><br></pre></td></tr></table></figure></li><li><p>自定义中间的步骤：</p><ul><li><p>1、在 app 目录下新建一个 py 文件，名字自定义，并在该 py 文件中导入 MiddlewareMixin：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br></pre></td></tr></table></figure></li><li><p>2、自定义的中间件类，要继承父类 MiddlewareMixin:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M1</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 中间件1 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 如果方法中没有返回值（返回None），继续向后走</span></span><br><span class="line">        <span class="comment"># 如果有返回值 HttpResponse、render 、redirect</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M1.process_request&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;无权访问&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M1.process_response&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M2</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 中间件2 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M2.process_request&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;M2.process_response&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li><li><p>3、在 settings.py 中的 MIDDLEWARE 里注册自定义的中间件类:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.middleware.auth.M1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.middleware.auth.M2&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>4、在中间件的process_request方法</p><ul><li>如果方法中没有返回值（返回None），继续向后走</li><li>如果有返回值 HttpResponse、render 、redirect…，则不再继续向后执行。</li></ul></li></ul></li></ul><h2 id="三-中间件实现登录校验"><a href="#三-中间件实现登录校验" class="headerlink" title="(三)中间件实现登录校验"></a>(三)中间件实现登录校验</h2><ul><li><p>仅为一个例子，具体问题具体实现</p></li><li><p>编写中间件</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthMiddleware</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 0.排除那些不需要登录就能访问的页面</span></span><br><span class="line">        <span class="comment">#   request.path_info 获取当前用户请求的URL /login/</span></span><br><span class="line">        <span class="keyword">if</span> request.path_info == <span class="string">&quot;/login/&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.读取当前访问的用户的session信息，如果能读到，说明已登陆过，就可以继续向后走。</span></span><br><span class="line">        info_dict = request.session.get(<span class="string">&quot;info&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(info_dict)</span><br><span class="line">        <span class="keyword">if</span> info_dict:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.没有登录过，重新回到登录页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>应用中间件</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.middleware.auth.AuthMiddleware&#x27;</span>, <span class="comment"># 应用中间件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h1 id="九、文件的上传"><a href="#九、文件的上传" class="headerlink" title="九、文件的上传"></a>九、文件的上传</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeNet-5</title>
      <link href="/2022/10/04/LeNet-5/"/>
      <url>/2022/10/04/LeNet-5/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>LeNet-5由LeCun等人提出于1998年提出，是一种用于手写体字符识别的非常高效的卷积神经网络。出自论文《Gradient-Based Learning Applied to Document Recognition》</li><li><a href="http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf">http://yann.lecun.com/exdb/publis/pdf/lecun-98.pdf</a></li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><p>LeNet-5网络示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/819b3373e991f235.png" alt=""></p></li><li><p>C1层：该层是一个卷积层。使用6个大小为5x5的卷积核，步长为1，对输入层进行卷积运算，特征图尺寸为32-5+1=28，因此产生6个大小为28x28的特征图。这么做够防止原图像输入的信息掉到卷积核边界之外。</p></li><li><p>S2层：该层是一个池化层（pooling，也称为下采样层）。这里采用max_pool（最大池化），池化的size定为2x2，经池化后得到6个14x14的特征图，作为下一层神经元的输入。</p></li><li><p>C3层：该层仍为一个卷积层，我们选用大小为5x5的16种不同的卷积核。这里需要注意：C3中的每个特征图，都是S2中的所有6个或其中几个特征图进行加权组合得到的。输出为16个10x10的特征图。</p></li><li><p>S4层：该层仍为一个池化层，size为2x2，仍采用max_pool。最后输出16个5x5的特征图，神经元个数也减少至16x5x5=400。</p></li><li><p>C5层：该层我们继续用5x5的卷积核对S4层的输出进行卷积，卷积核数量增加至120。这样C5层的输出图片大小为5-5+1=1。最终输出120个1x1的特征图。这里实际上是与S4全连接了，但仍将其标为卷积层，原因是如果LeNet-5的输入图片尺寸变大，其他保持不变，那该层特征图的维数也会大于1x1。</p></li><li><p>F6层：该层与C5层全连接，输出84张特征图。</p></li><li><p>输出层：该层与F6层全连接，输出长度为10的张量，代表所抽取的特征属于哪个类别。（例如[0,0,0,1,0,0,0,0,0,0]的张量，1在index=3的位置，故该张量代表的图片属于第三类）</p></li></ul><h2 id="明细"><a href="#明细" class="headerlink" title="明细"></a>明细</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li>padding：在图像四周填充零的层数</li><li>stride：卷积核移动的步长</li></ul><h3 id="C1层"><a href="#C1层" class="headerlink" title="C1层"></a>C1层</h3><ul><li><p>C1 层是卷积层，使用 6 个 5×5 大小的卷积核，padding=0，stride=1进行卷积，得到 6 个 28×28 大小的特征图：32-5+1=28</p></li><li><p>C1层原理示意</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/392c16739f6bc405.png" alt=""></p></li><li><p><strong>参数个数</strong>：(5x5+1)x6=156，其中5x5为卷积核的25个参数w，1为偏置项b。</p><p><strong>连接数</strong>：156x28x28=122304，其中156为单次卷积过程连线数，28x28为输出特征层，每一个像素都由前面卷积得到，即总共经历28x28次卷积。</p></li></ul><h3 id="S2层"><a href="#S2层" class="headerlink" title="S2层"></a>S2层</h3><ul><li><p>S2 层是降采样层，使用 6 个 2×2 大小的卷积核进行池化，padding=0，stride=2，得到 6 个 14×14 大小的特征图：28/2=14。</p></li><li><p>S2 层其实相当于降采样层+激活层。先是降采样，然后激活函数 sigmoid 非线性输出。先对 C1 层 2x2 的视野求和，然后进入激活函数，即：</p><script type="math/tex; mode=display">sigmoid(w·\sum_{i = 1}^4x_i + b)</script></li><li><p>S2层示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/97039d914f703b7e.png" alt=""></p></li><li><p><strong>参数个数</strong>：(1+1)x6=12，其中第一个 1 为池化对应的 2x2 感受野中最大的那个数的权重 w，第二个 1 为偏置 b。</p><p><strong>连接数</strong>：(2x2+1)x6x14x14= 5880，虽然只选取 2x2 感受野之和，但也存在 2x2 的连接数，1 为偏置项的连接，14x14 为输出特征层，每一个像素都由前面卷积得到，即总共经历 14x14 次卷积。</p></li></ul><h3 id="C3层"><a href="#C3层" class="headerlink" title="C3层"></a>C3层</h3><ul><li><p>C3 层是卷积层，使用 16 个 5×5xn 大小的卷积核，padding=0，stride=1 进行卷积，得到 16 个 10×10 大小的特征图：14-5+1=10。</p></li><li><p>16 个卷积核并不是都与 S2 的 6 个通道层进行卷积操作，如下图所示，C3 的前六个特征图（0,1,2,3,4,5）由 S2 的相邻三个特征图作为输入，对应的卷积核尺寸为：5x5x3；接下来的 6 个特征图（6,7,8,9,10,11）由 S2 的相邻四个特征图作为输入对应的卷积核尺寸为：5x5x4；接下来的 3 个特征图（12,13,14）号特征图由 S2 间断的四个特征图作为输入对应的卷积核尺寸为：5x5x4；最后的 15 号特征图由 S2 全部(6 个)特征图作为输入，对应的卷积核尺寸为：5x5x6。</p></li><li><p>C3输入示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/66e1b30ae1a7e968.png" alt=""></p></li><li><p>值得注意的是，卷积核是 5×5 且具有 3 个通道，每个通道各不相同，这也是下面计算时 5*5 后面还要乘以3,4,6的原因。这是多通道卷积的计算方法。</p></li><li><p>C3层示意图</p><p><img src="https://s3.bmp.ovh/imgs/2022/10/04/7ae9f260059019a9.png" alt=""></p></li><li><p><strong>参数个数</strong>：(5x5x3+1)x6+(5x5x4+1)x6+(5x5x4+1)x3+(5x5x6+1)x1=1516。</p><p><strong>连接数</strong>：1516x10x10 = 151600。10x10为输出特征层，每一个像素都由前面卷积得到，即总共经历10x10次卷积。</p></li></ul><h3 id="S4层"><a href="#S4层" class="headerlink" title="S4层"></a>S4层</h3><ul><li><p>S4 层与 S2 一样也是降采样层，使用 16 个 2×2 大小的卷积核进行池化，padding=0，stride=2，得到 16 个 5×5 大小的特征图：10/2=5。</p></li><li><p><strong>参数个数</strong>：(1+1)*16=32。</p><p><strong>连接数</strong>：(2<em>2+1)</em>16<em>5</em>5= 2000。</p></li></ul><h3 id="C5层"><a href="#C5层" class="headerlink" title="C5层"></a>C5层</h3><ul><li><p>C5 层是卷积层，使用 120 个 5×5x16 大小的卷积核，padding=0，stride=1进行卷积，得到 120 个 1×1 大小的特征图：5-5+1=1。即相当于 120 个神经元的全连接层。</p></li><li><p>值得注意的是，与C3层不同，这里120个卷积核都与S4的16个通道层进行卷积操作。</p></li><li><p><strong>参数个数</strong>：(5<em>5</em>16+1)*120=48120。</p><p><strong>连接数</strong>：48120<em>1</em>1=48120。</p></li></ul><h3 id="F6层"><a href="#F6层" class="headerlink" title="F6层"></a>F6层</h3><ul><li><p>F6 是全连接层，共有 84 个神经元，与 C5 层进行全连接，即每个神经元都与 C5 层的 120 个特征图相连。计算输入向量和权重向量之间的点积，再加上一个偏置，结果通过 sigmoid 函数输出。</p></li><li><p>F6 层有 84 个节点，对应于一个 7x12 的比特图，-1 表示白色，1 表示黑色，这样每个符号的比特图的黑白色就对应于一个编码。该层的训练参数和连接数是(120 + 1)x84=10164。</p></li><li><p><strong>参数个数</strong>：(120+1)x84=10164。</p><p><strong>连接数</strong>：(120+1)x84=10164。</p></li></ul><h3 id="输出层"><a href="#输出层" class="headerlink" title="输出层"></a>输出层</h3><ul><li><p>最后的 Output 层也是全连接层，是 Gaussian Connections，采用了 RBF 函数（即径向欧式距离函数），计算输入向量和参数向量之间的欧式距离（目前已经被Softmax 取代）。</p></li><li><p>Output 层共有 10 个节点，分别代表数字 0 到 9。假设x是上一层的输入，y 是 RBF的输出，则 RBF 输出的计算方式是：</p></li></ul><script type="math/tex; mode=display">y_i = \sum_{i=0}^{83}(x_j - w_{ij})^2</script><ul><li>上式中 i 取值从 0 到 9，j 取值从 0 到 7x12-1，w 为参数。RBF 输出的值越接近于 0，则越接近于 i，即越接近于 i 的 ASCII 编码图，表示当前网络输入的识别结果是字符 i。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>论文看不懂</li></ul>]]></content>
      
      
      <categories>
          
          <category> 神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神将网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本操作</title>
      <link href="/2022/09/30/Hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/09/30/Hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL常用语法</title>
      <link href="/2022/09/28/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/09/28/SQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="零、示例用表"><a href="#零、示例用表" class="headerlink" title="零、示例用表"></a>零、示例用表</h2><ul><li><p>学生表S</p><figure><table><thead><tr><th>S#</th><th>SN</th><th>SA</th><th>SD</th></tr></thead><tbody><tr><td>s1</td><td>李勇</td><td>20</td><td>CS</td></tr><tr><td>s2</td><td>刘晨</td><td>19</td><td>IS</td></tr><tr><td>s3</td><td>王敏</td><td>18</td><td>MA</td></tr><tr><td>s4</td><td>张立</td><td>19</td><td>IS</td></tr></tbody></table></figure></li><li><p>课程表C</p><figure><table><thead><tr><th>C#</th><th>CN</th><th>PC#</th></tr></thead><tbody><tr><td>C1</td><td>数据库</td><td>CS</td></tr><tr><td>C2</td><td>数学</td><td>&nbsp;</td></tr><tr><td>C3</td><td>信息系统</td><td>C1</td></tr><tr><td>C4</td><td>操作系统</td><td>C6</td></tr><tr><td>C5</td><td>数据结构</td><td>C7</td></tr><tr><td>C6</td><td>数据处理</td><td>&nbsp;</td></tr><tr><td>C7</td><td>Pascal语言</td><td>C6</td></tr></tbody></table></figure></li><li><p>学生选课表SC</p><figure><table><thead><tr><th>S#</th><th>C#</th><th>G</th></tr></thead><tbody><tr><td>s1</td><td>C1</td><td>92</td></tr><tr><td>s1</td><td>C2</td><td>85</td></tr><tr><td>s1</td><td>C3</td><td>88</td></tr><tr><td>s2</td><td>C2</td><td>90</td></tr><tr><td>s2</td><td>C3</td><td>80</td></tr></tbody></table></figure></li></ul><h2 id="一、SQL数据查询功能"><a href="#一、SQL数据查询功能" class="headerlink" title="一、SQL数据查询功能"></a>一、SQL数据查询功能</h2><ul><li>查询的基本结构：<code>SELECT-FROM-WHERE</code><ul><li><code>SELECT</code>目标列</li><li><code>FROM</code>基本表（或视图）</li><li><code>WHERE</code>检索条件</li></ul></li></ul><h3 id="（一）投影检索"><a href="#（一）投影检索" class="headerlink" title="（一）投影检索"></a>（一）投影检索</h3><ul><li><p>含义：<code>SELECT-FROM-WHERE</code>查询语句中没有<code>WHERE</code>子句</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#例: 查询学生的姓名和学号</span><br><span class="line"><span class="keyword">SELECT</span> SN, SA</span><br><span class="line"><span class="keyword">FROM</span> S;</span><br></pre></td></tr></table></figure></li><li><p>采用<code>DISTINCT</code>消去结果中的重复行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#例: 检索学生所选修课程的课程号</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> C#</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）选取检索"><a href="#（二）选取检索" class="headerlink" title="（二）选取检索"></a>（二）选取检索</h3><ul><li><p>由<code>WHERE</code>子句指出查询条件</p></li><li><p>检索条件可以包含以下的运算符</p><ul><li>比较运算符：<code>=, &lt;&gt;(!=), &gt;, &gt;=, &lt;=​</code></li><li>布尔运算符：<code>AND, OR, NOT</code></li><li><code>()</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>: 检索选修C2课程的所有学生的学号和成绩</span><br><span class="line"><span class="keyword">SELECT</span> S#, G</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> C# <span class="operator">=</span> <span class="string">&#x27;C2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>: 检索选修C1或C2且成绩高于<span class="number">70</span>分的学生学号、课程号和成绩</span><br><span class="line"><span class="keyword">SELECT</span> S#, C#, G</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> (C# <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span> <span class="keyword">OR</span> C# <span class="operator">=</span> <span class="string">&#x27;C2&#x27;</span>) <span class="keyword">AND</span> G <span class="operator">&gt;=</span> <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">3</span>: 检索成绩在<span class="number">70</span>至<span class="number">85</span>分之间的学生学号、课程号和成绩。</span><br><span class="line"><span class="keyword">SELECT</span> S#, C#, G</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> G <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">85</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）排序检索"><a href="#（三）排序检索" class="headerlink" title="（三）排序检索"></a>（三）排序检索</h3><ul><li><p>在SELECT-FROM-WHERE查询块后接ORDER BY子 句，将结果按指定列排序。 </p></li><li><p>格式：<code>ORDER BY 列名 ASC 或 DESC</code></p><ul><li><code>ASC</code>为升序；<code>DESC</code>为降序，缺省为升序 </li><li>可以是单列排序或多列排序 </li><li>该子句在<code>SELECT</code>语句中作为最后一个子句出现</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#例: 检索全体学生信息，并按系号升序，同一个系</span><br><span class="line">按年龄降序排列。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> SD, SA <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（四）连表检索"><a href="#（四）连表检索" class="headerlink" title="（四）连表检索"></a>（四）连表检索</h3><ul><li>将多个相互关联的表按照一定条件连接起来，实现多表数据检索</li><li>SELECT-FROM-WHERE语句块结构：<ul><li>SELECT—— 指明选取的列名（来自多个表） </li><li>FROM—— 指明要进行连接的表名 </li><li>WHERE——指明连接条件（连接谓词）与选取条件。</li></ul></li></ul><h4 id="1、一般格式"><a href="#1、一般格式" class="headerlink" title="1、一般格式"></a>1、一般格式</h4><ul><li><p>连接条件一般格式为：<code>[&lt;表名&gt; .] &lt;列名&gt; &lt;比较运算符&gt; [&lt;表名&gt; .] &lt;列名&gt;</code></p><p>其中， <code>&lt;列名&gt;</code>称为连接字段； <code>&lt;比较运算符&gt;</code>主要有：<code>=，&gt;，&lt;， &gt;=，&lt;=，!=</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>: 检索学生张华所学课程的成绩。</span><br><span class="line"><span class="keyword">SELECT</span> SN, C#, G</span><br><span class="line"><span class="keyword">FROM</span> S, SC</span><br><span class="line"><span class="keyword">WHERE</span> S.S#<span class="operator">=</span>SC.S# <span class="keyword">AND</span> SN<span class="operator">=</span><span class="string">&#x27;张华&#x27;</span>;</span><br><span class="line"># 注：如果连接的表中有属性名相同，要用表名作前缀加以区分。</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、自身连接"><a href="#2、自身连接" class="headerlink" title="2、自身连接"></a>2、自身连接</h4><ul><li><p>表自身的连接：通过定义别名，将一个表看成两个表，进行连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">2</span>: 检索所有比李勇年龄大的学生姓名、年龄。</span><br><span class="line"><span class="keyword">SELECT</span> X.SN, X.SA</span><br><span class="line"><span class="keyword">FROM</span> S X, S Y</span><br><span class="line"><span class="keyword">WHERE</span> X.SA <span class="operator">&gt;</span> Y.SA <span class="keyword">AND</span> Y.SN <span class="operator">=</span> ‘李勇’;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、外连接"><a href="#3、外连接" class="headerlink" title="3、外连接"></a>3、外连接</h4><ul><li><p>外连接：在连接谓词某一边加（*或+），则逻辑上为*所在边的表增加了一个空行。它可以与另一个表中所有不满足连接条件的元组进行连接，使这些元组能够输出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">3</span>: 检索所有学生的全部信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S, SC</span><br><span class="line"><span class="keyword">WHERE</span> S.S# <span class="operator">=</span> SC.S#(<span class="operator">*</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="（五）子查询嵌套检索"><a href="#（五）子查询嵌套检索" class="headerlink" title="（五）子查询嵌套检索"></a>（五）子查询嵌套检索</h3><ul><li>WHERE子句中可以包含另一个查询块，该查询块称为<strong>子查询或嵌套查询</strong>，包含子查询的语句称为<strong>外部查询</strong> </li><li>外部查询利用子查询来获取检索条件的条件值，检索条件根据子查询的结果来确定外部查询的结果数据 </li><li>子查询按照与外部查询的联系不同，分为普通子查询和相关子查询 <ul><li>普通子查询：与外部查询无关，可单独执行得一组值</li><li>相关子查询：把外查询的列值作为检索条件的条件值</li></ul></li></ul><h4 id="1、涉及同一个表的子查询"><a href="#1、涉及同一个表的子查询" class="headerlink" title="1、涉及同一个表的子查询"></a>1、涉及同一个表的子查询</h4><ul><li><p>如果子查询返回单值，可以直接用比较运算符<code>=,&lt;&gt;,&gt;,&gt;=,&lt;,&lt;=</code>等连接子查询。</p></li><li><p>如果子查询返回一组值，则必须在比较运算符和子 查询之间插入<code>ANY、ALL</code>等操作符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>: 检索与李勇同岁的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S.SA <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> SA <span class="keyword">FROM</span> S </span><br><span class="line"> <span class="keyword">WHERE</span> SN<span class="operator">=</span><span class="string">&#x27;李勇&#x27;</span>);</span><br><span class="line">#例<span class="number">2</span>: 检索选修C2课程的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S# <span class="operator">=</span> <span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> C#<span class="operator">=</span>‘C2’);</span><br><span class="line">#例<span class="number">3</span>: 检索选修C2课程的成绩最高的学生学号。</span><br><span class="line"><span class="keyword">SELECT</span> S#</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> C# <span class="operator">=</span> ‘C2’ <span class="keyword">AND</span> G <span class="operator">&gt;=</span> <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span> G <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> C# <span class="operator">=</span> <span class="string">&#x27;C2&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、用IN-NOT-IN检索"><a href="#2、用IN-NOT-IN检索" class="headerlink" title="2、用IN/NOT IN检索"></a>2、用IN/NOT IN检索</h4><ul><li><p>IN在嵌套子查询中最常使用。可代替<code>=ANY</code>，是集合运算 中的$\in$运算。</p></li><li><p>NOT IN表示不在集合中，与<code>!=ALL</code>相同，是集合运算 中的$\notin$运算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">4</span>: 检索选修C2课程的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> S# <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> C#<span class="operator">=</span>‘C2’);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、用EXISTS检索"><a href="#3、用EXISTS检索" class="headerlink" title="3、用EXISTS检索"></a>3、用EXISTS检索</h4><ul><li><p>EXISTS表示存在量词$\exists$</p></li><li><p>表达式 EXISTS（子查询）当且仅当子查询结果为<strong>非空</strong>时为真</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">5</span>: 检索选修C2课程的学生姓名。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> S#<span class="operator">=</span>S.S# <span class="keyword">AND</span> C#<span class="operator">=</span>‘C2’);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、用NOT-EXISTS-检索"><a href="#4、用NOT-EXISTS-检索" class="headerlink" title="4、用NOT EXISTS 检索"></a>4、用NOT EXISTS 检索</h4><ul><li><p>表示“不存在”。 </p></li><li><p>表达式NOT EXISTS（子查询）在子查询结果为<strong>空</strong>时为真。</p></li><li><p>用NOT EXISTS表达全称量词（$\forall$）</p><ul><li>任何一个带有全称量词的谓词总可以转换为等价的带存在量词的谓词：$(\forall x)P \equiv \neg(\exists x(\neg P))$</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">6</span>：检索选修所有课程的学生姓名。</span><br><span class="line"># 本题等价于“检索这样的学生的姓名，不存在他不选修的课程”。</span><br><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( # S.S#不选修的课程(不存在S.S#选修记录的课程） </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> C </span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( # S.S#选修C.C#的记录</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC</span><br><span class="line"> <span class="keyword">WHERE</span> S#<span class="operator">=</span>S.S# <span class="keyword">AND</span> C#<span class="operator">=</span>C.C#));</span><br></pre></td></tr></table></figure></li><li><p>用NOT EXISTS 表达蕴涵</p><ul><li>$p \rightarrow q \equiv \neg p \vee q$</li><li>$(\forall y) p \rightarrow q \equiv \neg(\exists y(\neg(p \rightarrow q))) \equiv \neg(\exists y(\neg(\neg p \vee q))) \equiv \neg \exists y(p \wedge \neg q)$</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 例<span class="number">7</span>：检索至少选修了学生S2选修的全部课程的学生学号。</span><br><span class="line"># 本题用蕴含表达：“检索这样学生的学号，对于任意课程，只要S2选修，他就选修。”</span><br><span class="line"># 本题等价于“检索这样学生的学号，不存在S2选修而他没有选修的课程”。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> S#</span><br><span class="line"><span class="keyword">FROM</span> SC SCX</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( # S2选修而SCX.S#没有选修的课程（S2选修的课程并且不存在SCX.S#选修该课程的记录）</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC SCY</span><br><span class="line"> <span class="keyword">WHERE</span> SCY.S# <span class="operator">=</span> ‘S2’ <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ( # SCX.S#选修SCY.C#的记录</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC SCZ</span><br><span class="line"> <span class="keyword">WHERE</span> S# <span class="operator">=</span> SCX.S# <span class="keyword">AND</span> C# <span class="operator">=</span> SCY.C#));</span><br></pre></td></tr></table></figure></li></ul><h3 id="（六）并差交检索"><a href="#（六）并差交检索" class="headerlink" title="（六）并差交检索"></a>（六）并差交检索</h3><ul><li><p>并、差、交的SQL运算符： </p><ul><li>并：UNION </li><li>差：MINUS </li><li>交：INTERSECT</li></ul></li><li><p>并、差、交检索的操作对象必须是相容的， 是同类关系，即必须有相同数量的属性列， 且相应属性列的域也必须相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># eg1：检索选修了C1或C2课程的学生学号。</span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> C#<span class="operator">=</span><span class="string">&#x27;C1&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> S# <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> C#<span class="operator">=</span><span class="string">&#x27;C2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>：检索无人选修的课程号和名称。</span><br><span class="line"><span class="keyword">SELECT</span> C#，CN <span class="keyword">FROM</span> C <span class="keyword">WHERE</span> C# <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> C# <span class="keyword">FROM</span> C </span><br><span class="line"> MINUS</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> C# <span class="keyword">FROM</span> SC);</span><br></pre></td></tr></table></figure></li></ul><h3 id="（七）库函数检索"><a href="#（七）库函数检索" class="headerlink" title="（七）库函数检索"></a>（七）库函数检索</h3><ul><li><p>库（集）函数 </p><ul><li><code>COUNT()</code> 按列值计个数，<code>COUNT(*)</code>对行记数 </li><li><code>SUM()</code> 对数值列求总和</li><li><code>AVG()</code>求数值列的平均值</li><li><code>MAX()</code>在列中找出最大值</li><li><code>MIN()</code>在列中找出最小值</li></ul></li><li><p>只能在SELECT子句以及HAVING子句中出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索学生总数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> S;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>：检索选修了课程的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> S#) <span class="keyword">FROM</span> SC;</span><br><span class="line"></span><br><span class="line">#例<span class="number">3</span>：求学号为S4的学生的总分和平均分。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(G)，<span class="built_in">AVG</span>(G)</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> S#<span class="operator">=</span><span class="string">&#x27;S4&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">4</span>：检索选修了C1课程的学生最高分。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(G) <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> C#<span class="operator">=</span><span class="string">&#x27;C1&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（八）分组检索"><a href="#（八）分组检索" class="headerlink" title="（八）分组检索"></a>（八）分组检索</h3><ul><li><p>按属性列（列组）将关系的元组分组，每组在这些分组属 性列（列组）上具有相同值，对每一组执行SELECT操作。 </p></li><li><p>分组子句： <code>GROUP BY 列名 [HAVING 条件表达式] ——分组条件</code></p></li><li><p>WHERE子句与HAVING子句 </p><ul><li>WHERE 子句是针对“行”进行，用于去掉不符合条件的若干行</li><li>HAVING子句针对“分组”进行，必须和GROUP BY 连用，用 于去掉不符合条件的若干分组。</li><li>在查询块中出现的顺序：<code>WHERE — GROUP BY — HAVING</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索至少选修三门课程的学生学号和选课门数。</span><br><span class="line"><span class="keyword">SELECT</span> S#，<span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S#</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">#例<span class="number">2</span>：求选修四门以上课程的学生学号和总成绩（不统计不及格的课程）。最后按降序列出总成绩排序名单。</span><br><span class="line"><span class="keyword">SELECT</span> S#，SUM（G）</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> G<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S#</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">SUM</span>(G) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（九）算术表达式值的检索"><a href="#（九）算术表达式值的检索" class="headerlink" title="（九）算术表达式值的检索"></a>（九）算术表达式值的检索</h3><ul><li><p>SELECT子句中，可包括由属性列、常数、库函数、算 术运算符<code>+-*/</code>等组成的算术表达式。 </p></li><li><p>检索结果数据项名可用表达式表示或用“别名”来表示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：有职工表EMP( EMP#，EMPN，JOB，SALARY，BONUS，DEPT )，</span><br><span class="line">要求检索所有PROGRAMMER的奖金大于工资<span class="number">25</span><span class="operator">%</span>的职工姓名和一年的总收入，并按奖金与工资之比的降序排列。</span><br><span class="line"><span class="keyword">SELECT</span> EMPN，BONUS<span class="operator">/</span>SALARY BS, <span class="number">12</span><span class="operator">*</span>（SALARY<span class="operator">+</span>BONUS） TOTAL</span><br><span class="line"><span class="keyword">FROM</span> EMP</span><br><span class="line"><span class="keyword">WHERE</span> JOB<span class="operator">=</span><span class="string">&#x27;PROGRAMMER&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> BONUS<span class="operator">&gt;</span><span class="number">0.25</span><span class="operator">*</span>SALARY </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BONUS<span class="operator">/</span>SALARY <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（十）部分匹配查询"><a href="#（十）部分匹配查询" class="headerlink" title="（十）部分匹配查询"></a>（十）部分匹配查询</h3><ul><li><p>使用谓词LIKE 或NOT LIKE，一般形式： <code>&lt;列名&gt; LIKE/NOT LIKE &lt;字符串常量&gt;</code> </p><ul><li>– &lt;列名&gt;必须为字符型或变长字符型。 </li><li>– &lt;字符串常量&gt;可包含两个特殊符号 % 与_ <ul><li>%：代表任意序列的0个或多个字符； </li><li>_ ：代表任意单个字符</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索所有姓刘的学生的学号、姓名。</span><br><span class="line"><span class="keyword">SELECT</span> S#, SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> SN <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（十一）基于派生表的查询"><a href="#（十一）基于派生表的查询" class="headerlink" title="（十一）基于派生表的查询"></a>（十一）基于派生表的查询</h3><ul><li><p>当子查询出现在FROM子句中，则子查询生成的表称 为临时派生表，该表也可作为主查询的操作对象</p></li><li><p>AS 关键字可以省略，但必须为派生表指定别名</p></li><li><p>如果子查询中没有库函数，则派生表可不指定列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：检索每个学生超出自己平均成绩的课程号。</span><br><span class="line"><span class="keyword">SELECT</span> S#, C#</span><br><span class="line"><span class="keyword">FROM</span> SC, (</span><br><span class="line"><span class="keyword">SELECT</span> S#, <span class="built_in">AVG</span>(G) </span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> S#) <span class="keyword">AS</span> AVG_SC(AVG_S#,AVG_G)</span><br><span class="line"><span class="keyword">WHERE</span> SC.S#<span class="operator">=</span>AVG_SC.AVG_S# <span class="keyword">AND</span> SC.G<span class="operator">&gt;=</span>AVG_SC.AVG_G</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、SQL数据定义功能"><a href="#二、SQL数据定义功能" class="headerlink" title="二、SQL数据定义功能"></a>二、SQL数据定义功能</h2><h3 id="（一）定义基本表"><a href="#（一）定义基本表" class="headerlink" title="（一）定义基本表"></a>（一）定义基本表</h3><ul><li><p>基本语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create Table &lt;表名&gt; (</span><br><span class="line">&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束&gt;] </span><br><span class="line">[&#123;,&lt;列名&gt;&lt;数据类型&gt;[&lt;列级完整性约束&gt;]&#125;] </span><br><span class="line">[&#123;, [&lt;表级完整性约束&gt;]&#125;]</span><br><span class="line">); </span><br></pre></td></tr></table></figure></li><li><p>完整性约束 </p><ul><li>NULL/NOT NULL</li><li>UNIQUE</li><li>PRIMARY KEY</li><li>FOREIGN KEY</li><li>CHECK</li></ul></li><li><p>SQL92的数据类型</p><ul><li>char（n）：固定长度的字符串</li><li>varchar（n）：可变长字符串</li><li>int：整数</li><li>smallint：小整数类型</li><li>numeric（p，q）：定点数共p位，小数点右边q位</li><li>Real, double precision ：浮点数与双精度浮点数,精 度与机器有关</li><li>Float(n)：n位的精度浮点数。 </li><li>date：日期（年、月、日）</li><li>time：时间（小时、分、秒）</li><li>interval：两个date或time类型数据之间的差</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> S(</span><br><span class="line">S# <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">SN <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">SA <span class="type">int</span>,</span><br><span class="line">SD <span class="type">char</span>(<span class="number">15</span>),</span><br><span class="line"><span class="keyword">Primary</span> key(S#),</span><br><span class="line"><span class="keyword">Check</span> (SA <span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">and</span> SA <span class="operator">&lt;=</span><span class="number">45</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> SC(</span><br><span class="line">S# <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">C# <span class="type">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">G number(<span class="number">4</span>,<span class="number">2</span>),</span><br><span class="line"><span class="keyword">Primary</span> key (S#, C#),</span><br><span class="line"><span class="keyword">Foreign</span> key (S#) <span class="keyword">references</span> S (S#),</span><br><span class="line"><span class="keyword">Foreign</span> key (C#) <span class="keyword">references</span> C (C#)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）修改、删除基本表定义"><a href="#（二）修改、删除基本表定义" class="headerlink" title="（二）修改、删除基本表定义"></a>（二）修改、删除基本表定义</h3><ul><li><p>基本语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#修改基本表</span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">Add</span> <span class="operator">&lt;</span>新列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>[<span class="operator">&lt;</span>完整性约束<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">Drop</span> <span class="operator">&lt;</span>完整性约束名<span class="operator">&gt;</span>]</span><br><span class="line">[Modify <span class="operator">&lt;</span>列名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span>]</span><br><span class="line"></span><br><span class="line">#删除基本表</span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">Table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#例<span class="number">1</span>：S表增加“入学时间”属性</span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> S <span class="keyword">Add</span> Scome <span class="type">Date</span>;</span><br><span class="line">#例<span class="number">2</span>：将SA的数据类型改为半字长整数</span><br><span class="line"><span class="keyword">Alter</span> <span class="keyword">Table</span> S Modify SA <span class="type">Smallint</span>;</span><br><span class="line">#例<span class="number">3</span>：删除s表</span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">Table</span> S;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）定义、删除索引"><a href="#（三）定义、删除索引" class="headerlink" title="（三）定义、删除索引"></a>（三）定义、删除索引</h3><ul><li><p>基本语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义索引</span><br><span class="line"><span class="keyword">Create</span> [<span class="keyword">Unique</span>][Cluster] Index <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span> <span class="keyword">On</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> (<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[次序][, <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[次序]] …);</span><br><span class="line">#删除索引</span><br><span class="line"><span class="keyword">Drop</span> Index <span class="operator">&lt;</span>索引名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Unique</span> Index Scno <span class="keyword">On</span> SC(S# <span class="keyword">ASC</span>, C# <span class="keyword">DESC</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Drop</span> Index Stusno;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（四）定义视图"><a href="#（四）定义视图" class="headerlink" title="（四）定义视图"></a>（四）定义视图</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#定义视图</span><br><span class="line">##语法： </span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">View</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span></span><br><span class="line">[(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>] …)]</span><br><span class="line"><span class="keyword">As</span> <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">With</span> <span class="keyword">Check</span> Option]</span><br><span class="line"></span><br><span class="line">##示例：建立计算机系的学生视图</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">View</span> CS_Student</span><br><span class="line"><span class="keyword">As</span></span><br><span class="line"><span class="keyword">SELECT</span> S#, SN, SA <span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> SD <span class="operator">=</span> ‘CS’ ；</span><br><span class="line"></span><br><span class="line">#删除视图</span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">View</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="（五）查询视图"><a href="#（五）查询视图" class="headerlink" title="（五）查询视图"></a>（五）查询视图</h3><ul><li>参考基本表的查询</li></ul><h2 id="三、SQL数据更新"><a href="#三、SQL数据更新" class="headerlink" title="三、SQL数据更新"></a>三、SQL数据更新</h2><h3 id="（一）插入数据"><a href="#（一）插入数据" class="headerlink" title="（一）插入数据"></a>（一）插入数据</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#插入单个元组</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>[&#123;,<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>&#125;])]</span><br><span class="line"><span class="keyword">Values</span>(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>[&#123;,<span class="operator">&lt;</span>值<span class="operator">&gt;</span>&#125;])</span><br><span class="line">##示例：<span class="keyword">Insert</span> <span class="keyword">Into</span> S <span class="keyword">Values</span> (‘S10’, ‘陈冬’, ‘<span class="keyword">IS</span>’, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">#插入子查询结果</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>[&#123;,<span class="operator">&lt;</span>属性列<span class="operator">&gt;</span>&#125;])] <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line">##示例</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">Into</span> Dept_Age (Sdept, Avgage)</span><br><span class="line"><span class="keyword">Select</span> SD, <span class="built_in">AVG</span>(SA) <span class="keyword">From</span> S</span><br><span class="line"><span class="keyword">Group</span> <span class="keyword">By</span> SD;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）修改数据"><a href="#（二）修改数据" class="headerlink" title="（二）修改数据"></a>（二）修改数据</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">Update</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">Set</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>[&#123;, <span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>&#125;]</span><br><span class="line">[<span class="keyword">Where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br><span class="line">#示例：将学生S1的年龄改为<span class="number">22</span>岁</span><br><span class="line"><span class="keyword">Update</span> S</span><br><span class="line"><span class="keyword">Set</span> SA <span class="operator">=</span> <span class="number">22</span></span><br><span class="line"><span class="keyword">Where</span> S#<span class="operator">=</span>‘S1’;</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）删除数据"><a href="#（三）删除数据" class="headerlink" title="（三）删除数据"></a>（三）删除数据</h3><ul><li><p>基本语法及示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#语法 </span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [<span class="keyword">Where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>];</span><br><span class="line">#示例：</span><br><span class="line">– 例<span class="number">1</span>：删除学号为S19的学生的记录</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> S <span class="keyword">Where</span> S#<span class="operator">=</span>‘S19’;</span><br><span class="line">– 例<span class="number">2</span>：删除所有学生的选课记录</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> SC;</span><br><span class="line">– 例<span class="number">3</span>：删除计算机系所有学生的选课记录</span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">From</span> SC</span><br><span class="line"><span class="keyword">Where</span> ‘CS’ <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">Select</span> SD <span class="keyword">From</span> S</span><br><span class="line"><span class="keyword">Where</span> S .S# <span class="operator">=</span> SC.S#);</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、SQL触发器（MySql）"><a href="#四、SQL触发器（MySql）" class="headerlink" title="四、SQL触发器（MySql）"></a>四、SQL触发器（MySql）</h2><ul><li><p>基本语法及示例</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [触发器的名字]</span><br><span class="line">[触发器执行时机] [触发器监测的对象]</span><br><span class="line"><span class="keyword">ON</span> [表名]</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">[触发器主体代码]</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#示例</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `<span class="number">20373821</span>`.`Tage_trigger`</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> `<span class="number">20373821</span>`.`teacher`</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if new.Tage <span class="operator">&lt;=</span> <span class="number">24</span> <span class="keyword">then</span></span><br><span class="line">SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span></span><br><span class="line"><span class="keyword">set</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;教师年龄应大于24&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure></li><li><p>基本语法解释</p><ul><li><code>DELIMITER //</code>：MySQL 默认分隔符是<code>;</code> 但在触发器中，我们使用 <code>//</code> 表示触发器的开始与结束。</li><li><code>[触发器的名字]</code>：这里填写触发器的名字</li><li><code>[触发器执行时机]</code>：这里设置触发器是在关键动作执行之前触发，还是执行之后触发。</li><li><code>[触发器监测的对象]</code>：触发器可以监测 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code> 的操作，当监测的命令对触发器关联的表进行操作时，触发器就被激活了。</li><li><code>[表名]</code>：将这个触发器与数据库中的表进行关联，触发器定义在表上，也附着在表上，如果这个表被删除了，那么这个触发器也随之被删除。</li><li><code>FOR EACH ROW</code>：这句表示只要满足触发器触发条件，触发器都会被执行，也就是说带上这个参数后，触发器将监测每一行对关联表操作的代码，一旦符合条件，触发器就会被触发。</li><li><code>[触发器主体代码]</code>：这里是当满足触发条件后，被触发执行的代码主体。这里可以是一句 SQL 语句，也可以是多行命令。如果是多行命令，那么这些命令要写在 <code>BEGIN...END</code> 之间。</li></ul></li><li><p>在创建触发器主体时，还可以使用<code>OLD</code>和<code>NEW</code> 来获取 SQL 执行<code>INSERT</code>，<code>UPDATE</code>和<code>DELETE</code> 操作前后的写入数据。</p></li><li><p>参考链接<a href="https://zhuanlan.zhihu.com/p/439273702">https://zhuanlan.zhihu.com/p/439273702</a></p></li></ul><h2 id="五、SQL数据控制功能"><a href="#五、SQL数据控制功能" class="headerlink" title="五、SQL数据控制功能"></a>五、SQL数据控制功能</h2><ul><li>定义完整性约束条件：支持事务操作、提供安全控制功能 <ul><li>授权 <code>GRANT &lt;权限&gt; [ON &lt;对象类型&gt; &lt;对象名&gt;] TO &lt;用户&gt;</code></li><li>收回权限 <code>REVOKE &lt;权限&gt; [ON &lt;对象类型&gt; &lt;对象名&gt;]  FROM &lt;用户&gt;</code></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BP神经网络</title>
      <link href="/2022/09/04/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/09/04/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><ul><li>BP(back propagation)神经网络是1986年由Rumelhart和McClelland为首的科学家提出的概念，是一种按照误差逆向传播算法训练的多层前馈神经网络，是应用最广泛的神经网络模型之一 。Minsky和Papert在颇具影响力的”perceptron” 一书中指出，简单的感知器只能求解线性问题，能够求解非线性问题的网络应该具有感知层，但是对隐藏层神经元的学习规则还没有合理的理论依据。</li></ul><h3 id="相关定义与原理"><a href="#相关定义与原理" class="headerlink" title="相关定义与原理"></a>相关定义与原理</h3><ul><li><p>基本原理</p><p>利用输出后的误差来估计输出层直接前层的误差，再利用这个误差估计更前一层的误差，如此递归</p></li><li><p>结构示意图<img src="https://s3.bmp.ovh/imgs/2022/09/04/55543f51f53ae0db.bmp" alt=""></p></li><li><p>符号定义及相关运算</p><p>假设输入层有n个神经元，隐含层有p个神经元，输出层含有q个神经元</p><ul><li><p>输入向量 $x = (x_1, x_2, x_3,…x_n)$</p></li><li><p>隐含层输入向量$hi = (hi_1, hi_2, hi_3,…hi_p)$</p></li><li><p>隐含层输出向量$ho = (ho_1, ho_2, ho_3,…ho_p)$</p></li><li><p>输出层输入向量$yi = (yi_1, yi_2, yi_3,…yi_q)$ </p></li><li><p>输出层输出向量$yo = (yo_1, yo_2, yo_3,…yo_q)$</p></li><li><p>输入层与中间层的连接权值$w_{ih}$</p></li><li><p>隐含层与输出层的连接权值$w_{ho}$</p></li><li><p>隐含层各神经元的阈值$b_h$</p></li><li><p>输出层各神经元的阈值$b_o$</p></li><li><p>样本数据个数$k=1,2,3,…m$</p></li><li><p>期望输出向量$d = (d_1, d_2,d_3,…d_q)$</p></li><li><p>误差函数$e=\frac{1}{2} \sum_{i=0}^{q} (d_i(k) - yo_i(k))^2$（第k个输入样本）</p></li><li><p>激活函数$f(x)$</p></li><li><p>动量因子：BP神经网络在批处理训练时会陷入局部最小，这个时候加入一个动量因子有助于其反馈的误差信号使神经元的权值重新振荡起来</p></li><li><p>偏置结点：偏置结点是为了描述训练数据中没有的特征，偏置结点对于下一层的每一个结点的权重的不同而生产不同的偏置，于是可以认为偏置是每一个结点（除输入层外）的属性</p></li><li><p>推导过程</p><ul><li><p>随机选择第k个输入样本和其对应的期望输出</p><script type="math/tex; mode=display">\displaylines{  x(k) = \{x_1(k), x_2(k), x_3(k),...x_n(k)\}\\    d(k) = \{d_1(k), d_2(k), d_3(k),...d_q(k)\}}</script></li><li><p>计算隐含层的各个神经元的输入和输出</p><script type="math/tex; mode=display">\displaylines{&h i_h(k)=\sum_{i=1}^n w_{i h} x_i(k)-b_h \quad h=1,2, \cdots, p\\&h o_h(k)=f\left(h i_h(k)\right) \quad h=1,2, \cdots, p\\&y i_o(k)=\sum_{h=1}^p w_{h o} h o_h(k)-b_o \quad o=1,2, \cdots q\\&y o_o(k)=f\left(yi_o(k)\right) \quad o=1,2, \cdots, q\\}</script></li><li><p>利用网络期望输出和实际输出，计算误差函数e对输出层的各神经元的偏导数</p><script type="math/tex; mode=display">\displaylines{\frac{\partial e}{\partial w_{h o}}=\frac{\partial e}{\partial y i_o} \frac{\partial y i_o}{\partial w_{h o}} \quad \\\frac{\partial y i_o(k)}{\partial w_{h o}}=\frac{\partial\left(\sum_h^p w_{h o} h o_h(k)-b_o\right)}{\partial w_{h o}}=h o_h(k) \\\frac{\partial e}{\partial y i_o}=\frac{\partial\left(\frac{1}{2} \sum_{o=1}^q\left(d_o(k)-y o_o(k)\right)\right)^2}{\partial y i_o}=-\left(d_o(k)-y o_o(k)\right) y o_o^{\prime}(k)\\= -\left(d_o(k)-y o_o(k)\right) f'(yi_o(k)) = -\delta_o(k)}</script></li><li><p>利用输出层各神经元的<script type="math/tex">\delta_o(k)</script>和隐含层各神经元的输出来修正连接权值<script type="math/tex">w_{ho}(k)</script>，<script type="math/tex">\mu</script>是设置的学习率</p></li></ul><script type="math/tex; mode=display">\displaylines{\Delta w_{ho}(k) = -\mu \frac{\partial e}{\partial w_{ho}} = \mu\delta_0(k)ho_h(k) \\w^{N+1}_{ho} = w^{N}_{ho} + \Delta w_{ho}(k)}</script><ul><li><p>利用隐含层各神经元的$\delta_o(k)$和输入层的输入来修正输出层的连接权$w_{ho}(k)$</p><script type="math/tex; mode=display">\displaylines{\Delta w_{i h}(k)=-\mu \frac{\partial e}{\partial w_{i h}}=-\mu \frac{\partial e}{\partial yi_o}\frac{\partial yi_o}{\partial ho_h(k)}\frac{\partial ho_h(k)}{\partial hi_h(k)}\frac{\partial h i_h(k)}{\partial w_{i h}}\\\frac{\partial e}{\partial yi_o}= \delta_o(k),\quad \frac{\partial yi_o}{\partial ho_h(k)} = w_{ho},\quad\frac{\partial ho_h(k)}{\partial hi_h(k)} = f'(hi_h(k))\\令\delta_h(k) = \delta_o(k)w_{ho}f'(hi_h(k))\\所以\Delta w_{i h}(k)=\mu\delta_h(k) x_i(k) \\w_{i h}^{N+1}=w_{i h}^N+\mu \delta_h(k) x_i(k)}</script></li><li><p>p.s.：求导时需要利用链式求导法则</p></li><li><p>全局误差</p><script type="math/tex; mode=display">  E = \frac{1}{2m}\sum_{k=1}^{m}\sum_{i=1}^{n}(d_i(k) - yo_i(k))^2</script></li></ul></li></ul></li></ul><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derived_sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_matrix</span>(<span class="params">m, n, fill=<span class="number">0.0</span></span>):  <span class="comment"># m行n列</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        a.append([fill] * n)</span><br><span class="line">    <span class="keyword">return</span> np.array(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># neural network class 4 layer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">neuralNetwork</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># initialize the neural network</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_nodes, hidden_nodes, hidden2_nodes, output_nodes, learning_rate=<span class="number">0.1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        The network consists of three layers: input layer, hidden layer and output layer.</span></span><br><span class="line"><span class="string">        Here defined these layers.</span></span><br><span class="line"><span class="string">        :param input_nodes: dimension of input</span></span><br><span class="line"><span class="string">        :param hidden_nodes: dimension of hidden nodes</span></span><br><span class="line"><span class="string">        :param output_nodes: dimension of output</span></span><br><span class="line"><span class="string">        :param learning_rate: the learning rate of neural network</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        self.x_num = input_nodes + <span class="number">1</span>  <span class="comment"># 添加一个偏置</span></span><br><span class="line">        self.h_num = hidden_nodes</span><br><span class="line">        self.h2_num = hidden2_nodes</span><br><span class="line">        self.y_num = output_nodes</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化向量</span></span><br><span class="line">        self.x_vector = np.array([<span class="number">0.0</span>] * self.x_num)</span><br><span class="line">        self.hi_vector = np.array([<span class="number">0.0</span>] * self.h_num)</span><br><span class="line">        self.ho_vector = np.array([<span class="number">0.0</span>] * self.h_num)</span><br><span class="line">        self.h2i_vector = np.array([<span class="number">0.0</span>] * self.h2_num)</span><br><span class="line">        self.h2o_vector = np.array([<span class="number">0.0</span>] * self.h2_num)</span><br><span class="line">        self.yi_vector = np.array([<span class="number">0.0</span>] * self.y_num)</span><br><span class="line">        self.yo_vector = np.array([<span class="number">0.0</span>] * self.y_num)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化权值矩阵</span></span><br><span class="line">        <span class="comment"># 输入数据到隐藏层输入的变换矩阵</span></span><br><span class="line">        self.weight_xh = (np.random.random([self.x_num, self.h_num]) - <span class="number">0.51</span>)  </span><br><span class="line">        <span class="comment"># 隐藏层间的变换矩阵</span></span><br><span class="line">        self.weight_hh2 = (np.random.random([self.h_num, self.h2_num]) - <span class="number">0.51</span>)</span><br><span class="line">        <span class="comment"># 隐藏层输出到输出层输入的变换矩阵</span></span><br><span class="line">        self.weight_h2y = (np.random.random([self.h2_num, self.y_num]) - <span class="number">0.51</span>)</span><br><span class="line">        <span class="comment"># 学习率</span></span><br><span class="line">        self.lr = learning_rate</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 动量因子</span></span><br><span class="line">        self.input_correction = make_matrix(self.x_num, self.h_num)</span><br><span class="line">        self.hidden_correction = make_matrix(self.h_num, self.h2_num)</span><br><span class="line">        self.output_correction = make_matrix(self.h2_num, self.y_num)</span><br><span class="line"><span class="comment"># 动量因子影响率</span></span><br><span class="line">        self.m = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_feature</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Forward the neural network</span></span><br><span class="line"><span class="string">        :param input_feature: single input image, flattened [784, ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(input_feature) != self.x_num - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;输入数据与输入结点数量不同&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 简单的处理一下输入数据</span></span><br><span class="line">        self.x_vector[<span class="number">1</span>:self.x_num] = input_feature</span><br><span class="line">        self.x_vector = np.array(self.x_vector)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输入层-&gt;隐藏层</span></span><br><span class="line">        self.hi_vector = np.dot(self.x_vector, self.weight_xh)</span><br><span class="line">        <span class="comment"># print(self.hi_vector)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 激活隐藏层神经元</span></span><br><span class="line">        self.ho_vector = np.array(sigmoid(self.hi_vector))</span><br><span class="line">        <span class="comment"># print(self.ho_vector)</span></span><br><span class="line"></span><br><span class="line">        self.h2i_vector = np.dot(self.ho_vector, self.weight_hh2)</span><br><span class="line"></span><br><span class="line">        self.h2o_vector = np.array(sigmoid(self.h2i_vector))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 隐藏层-&gt;输出层</span></span><br><span class="line">        self.yi_vector = np.dot(self.h2o_vector, self.weight_h2y)</span><br><span class="line">        <span class="comment"># print(self.yi_vector)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 激活输出层神经元</span></span><br><span class="line">        self.yo_vector = np.array(sigmoid(self.yi_vector))</span><br><span class="line">        <span class="comment"># print(self.yo_vector)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.yo_vector</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backpropagation</span>(<span class="params">self, targets_list</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Propagate backwards</span></span><br><span class="line"><span class="string">        :param targets_list: output onehot code of a single image, [10, ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(targets_list) != self.y_num:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;标记数量与输出数量不符&quot;</span>)</span><br><span class="line"></span><br><span class="line">        targets = np.array(targets_list)  <span class="comment"># 简单处理输入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算误差</span></span><br><span class="line">        error = <span class="number">0.5</span> * np.dot((targets - self.yo_vector).T,</span><br><span class="line">                             (targets - self.yo_vector))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算残差</span></span><br><span class="line">        delta_h2y = np.array((targets - self.yo_vector) </span><br><span class="line">                             * derived_sigmoid(self.yo_vector))</span><br><span class="line">        delta_hh2 = np.array(np.dot(delta_h2y, self.weight_h2y.T) </span><br><span class="line">                             * derived_sigmoid(self.h2o_vector))</span><br><span class="line">        delta_xh = np.array(np.dot(delta_hh2, self.weight_hh2.T) </span><br><span class="line">                            * derived_sigmoid(self.ho_vector))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新权值</span></span><br><span class="line">        <span class="comment"># print(self.weight_xh)</span></span><br><span class="line">        self.weight_h2y += self.lr </span><br><span class="line">        * np.dot(delta_h2y.reshape(-<span class="number">1</span>, <span class="number">1</span>),self.h2o_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T </span><br><span class="line">        + self.m * self.output_correction</span><br><span class="line"></span><br><span class="line">        self.weight_hh2 += self.lr </span><br><span class="line">        * np.dot(delta_hh2.reshape(-<span class="number">1</span>, <span class="number">1</span>),self.hi_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T </span><br><span class="line">        + self.m * self.hidden_correction</span><br><span class="line"></span><br><span class="line">        self.weight_xh += self.lr </span><br><span class="line">        * np.dot(delta_xh.reshape(-<span class="number">1</span>, <span class="number">1</span>),self.x_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T </span><br><span class="line">        + self.m * self.input_correction</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        self.output_correction = self.lr </span><br><span class="line">        * np.dot(delta_h2y.reshape(-<span class="number">1</span>, <span class="number">1</span>), self.h2o_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T</span><br><span class="line">        self.hidden_correction = self.lr </span><br><span class="line">        * np.dot(delta_hh2.reshape(-<span class="number">1</span>, <span class="number">1</span>), self.ho_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T</span><br><span class="line">        self.input_correction = self.lr </span><br><span class="line">        * np.dot(delta_xh.reshape(-<span class="number">1</span>, <span class="number">1</span>), self.x_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)).T</span><br><span class="line">        <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 常用数学符号和公式</title>
      <link href="/2022/08/31/Markdown-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/08/31/Markdown-%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Cmd-Markdown-公式指导手册"><a href="#Cmd-Markdown-公式指导手册" class="headerlink" title="Cmd Markdown 公式指导手册"></a>Cmd Markdown 公式指导手册</h1><p><a href="https://ericp.cn/cmd">https://ericp.cn/cmd</a></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
